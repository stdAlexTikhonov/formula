{"version":3,"sources":["Token.ts","TokenType.ts","Lexer.ts","AST/ExpressionNode.ts","AST/StatementsNode.ts","AST/NumberNode.ts","AST/VariableNode.ts","AST/OperandNode.ts","AST/BinOperationNode.ts","AST/UnarOperationNode.ts","AST/FunctionNode.ts","Parser.ts","hooks.ts","store/codeSlice.ts","Tree.ts","components/List/styles.ts","data/index.ts","components/List/index.tsx","components/GlobalSearch/index.tsx","components/TextInput/index.tsx","components/Wrapper/mapping.ts","components/Wrapper/styles.ts","components/Wrapper/index.tsx","components/CustomButtons/styles.ts","components/UserInput/index.tsx","components/CustomIcon/greater.svg","components/CustomIcon/less.svg","components/CustomIcon/plus.svg","components/CustomIcon/minus.svg","components/CustomIcon/eq.svg","components/CustomIcon/mult.svg","components/CustomIcon/divide.svg","components/CustomIcon/gre_or_eq.svg","components/CustomIcon/less_or_eq.svg","components/CustomIcon/not_eq.svg","components/CustomIcon/index.tsx","components/CustomButtons/index.tsx","components/Drawer/index.tsx","components/Leaf/index.tsx","components/Func/styles.ts","components/Func/index.tsx","components/Node/styles.ts","components/Node/index.tsx","components/VisualBuilder/styles.ts","components/VisualBuilder/index.tsx","components/App/index.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["Token","type","text","pos","this","TokenType","name","regexp","tokenTypesList","NUMBER","VARIABLE","OPERAND","FUNCTION","SEMICOLON","SPACE","ASSIGN","RETURN","PLUS","MINUS","DIVIDE","MULTIPLY","LPAR","RPAR","Lexer","code","tokenList","nextToken","filter","token","length","tokenTypeValues","Object","values","i","tokenType","RegExp","result","substr","match","push","Error","ExpressionNode","StatementsNode","codeStrings","node","NumberNode","number","VariableNode","variable","OperandNode","operand","BinOperationNode","operator","leftNode","rightNode","UnarOperationNode","FunctionNode","func","function_","Parser","tokens","scope","currentToken","expected","find","operatorReturn","parseFormula","require","parseVariableOrNumberOrOperand","parseParentheses","parseReturn","variableNode","assignOperator","rightFormulaNode","root","codeStringNode","parseExpression","addNode","useAppDispatch","useDispatch","useAppSelector","useSelector","codeSlice","createSlice","initialState","value","index","brace","update_tree","reducers","setCode","state","action","payload","setCurrentIndex","toggleBrace","updateTree","actions","getCode","getCurrentIndex","getBrace","getUpdateTree","TreeNode","left","right","args","add_nodes","user_input","quantity","count","_find","_delete","child","useStyles","makeStyles","theme","createStyles","width","backgroundColor","palette","background","paper","DATA","MEASURES","FACTS","VARIABLES","FUNCTIONS","AGRGUMENTS","ADD_NODES","SelectedListItem","props","dispatch","index_in_tree","classes","React","useState","selectedIndex","setSelectedIndex","className","List","component","items","map","item","ind","ListItem","button","selected","onClick","event","Tree","addArguments","Boolean","handleListItemClick","ListItemIcon","ListItemText","primary","_keys","GlobalSearch","top","Box","position","TextField","label","style","margin","overflow","maxHeight","Divider","TextInput","showGlobal","setShowGlobal","showFunc","setShowFunc","error","setError","useEffect","lexer","lexAnalisys","console","log","rootNode","parseCode","e","message","display","height","flexDirection","alignItems","justifyContent","TextareaAutosize","outline","fontSize","padding","onChange","target","Alert","bottom","severity","Button","mapping_list_types","Map","set","wrapper","box","Wrapper","search","setSearch","filtered","setFiltered","includes","get","list","fullList","btn","UserInput","setNode","setValue","alignSelf","placeholder","CustomIcon","src","plus","alt","minus","less","less_or_eq","greater","gre_or_eq","not_eq","eq","mult","divide","getIcon","CustomButtons","setLeft","setRight","variant","TemporaryDrawer","setState","show_delete","setShowDelete","toggleDrawer","open","key","disableRipple","onMouseEnter","onMouseLeave","color","IconButton","size","preventDefault","stopPropagation","delete","swap_with_left","swap_with_right","Drawer","anchor","onClose","Leaf","cursor","borderLeft","borderRight","borderRadius","typography","mid","Func","show","setShow","handleClick","getComponent","Typography","arg","icon","Node","visible","setVisible","border","VisualBuilder","traversTree","App","view","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","codeReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.908045f2.chunk.js","sourcesContent":["import TokenType from \"./TokenType\";\r\n\r\nexport default class Token {\r\n  type: TokenType;\r\n  text: string;\r\n  pos: number;\r\n\r\n  constructor(type: TokenType, text: string, pos: number) {\r\n    this.type = type;\r\n    this.text = text;\r\n    this.pos = pos;\r\n  }\r\n}\r\n","export default class TokenType {\r\n  name: string;\r\n  regexp: string;\r\n\r\n  constructor(name: string, regexp: string) {\r\n    this.name = name;\r\n    this.regexp = regexp;\r\n  }\r\n}\r\n\r\nexport const tokenTypesList = {\r\n  NUMBER: new TokenType(\"NUMBER\", \"[0-9]*\"),\r\n  VARIABLE: new TokenType(\"VARIABLE\", \"([a-z][0-9]?)*\"),\r\n  OPERAND: new TokenType(\"OPERAND\", \"\\\\[\\\\w*\\\\]\"),\r\n  FUNCTION: new TokenType(\"FUNCTION\", \"[A-Z]*\\\\(.*\\\\)\"),\r\n  SEMICOLON: new TokenType(\"SEMICOLON\", \";\"),\r\n  SPACE: new TokenType(\"SPACE\", \"[ \\\\n\\\\t\\\\r]\"),\r\n  ASSIGN: new TokenType(\"ASSIGN\", \"\\\\=\"),\r\n  RETURN: new TokenType(\"RETURN\", \"RETURN\"),\r\n  PLUS: new TokenType(\"PLUS\", \"\\\\+\"),\r\n  MINUS: new TokenType(\"MINUS\", \"\\\\-\"),\r\n  DIVIDE: new TokenType(\"DIVIDE\", \"\\\\/\"),\r\n  MULTIPLY: new TokenType(\"MULTIPLY\", \"\\\\*\"),\r\n  LPAR: new TokenType(\"LPAR\", \"\\\\(\"),\r\n  RPAR: new TokenType(\"RPAR\", \"\\\\)\"),\r\n};\r\n","import Token from \"./Token\";\r\nimport { tokenTypesList } from \"./TokenType\";\r\n\r\nexport default class Lexer {\r\n  code: string;\r\n  pos: number = 0;\r\n  tokenList: Token[] = [];\r\n\r\n  constructor(code: string) {\r\n    this.code = code;\r\n  }\r\n\r\n  lexAnalisys(): Token[] {\r\n    while (this.nextToken()) {}\r\n\r\n    this.tokenList = this.tokenList.filter(\r\n      (token) => token.type.name !== tokenTypesList.SPACE.name\r\n    );\r\n    return this.tokenList;\r\n  }\r\n\r\n  nextToken(): boolean {\r\n    if (this.pos >= this.code.length) return false;\r\n\r\n    const tokenTypeValues = Object.values(tokenTypesList);\r\n\r\n    for (let i = 0; i < tokenTypeValues.length; i++) {\r\n      const tokenType = tokenTypeValues[i];\r\n      const regexp = new RegExp(\"^\" + tokenType.regexp);\r\n      const result = this.code.substr(this.pos).match(regexp);\r\n      if (result && result[0]) {\r\n        const token = new Token(tokenType, result[0], this.pos);\r\n        this.pos += result[0].length;\r\n        this.tokenList.push(token);\r\n        return true;\r\n      }\r\n    }\r\n    throw new Error(`Нв позиции ${this.pos} обнаружена ошибка`);\r\n  }\r\n}\r\n","export default class ExpressionNode {}\r\n","import ExpressionNode from \"./ExpressionNode\";\r\n\r\nexport default class StatementsNode extends ExpressionNode {\r\n  codeStrings: ExpressionNode[] = [];\r\n\r\n  addNode(node: ExpressionNode) {\r\n    this.codeStrings.push(node);\r\n  }\r\n}\r\n","import Token from \"../Token\";\r\n\r\nexport default class NumberNode {\r\n  number: Token;\r\n\r\n  constructor(number: Token) {\r\n    this.number = number;\r\n  }\r\n}\r\n","import ExpressionNode from \"./ExpressionNode\";\r\nimport Token from \"../Token\";\r\n\r\nexport default class VariableNode extends ExpressionNode {\r\n  variable: Token;\r\n\r\n  constructor(variable: Token) {\r\n    super();\r\n    this.variable = variable;\r\n  }\r\n}\r\n","import ExpressionNode from \"./ExpressionNode\";\r\nimport Token from \"../Token\";\r\n\r\nexport default class OperandNode extends ExpressionNode {\r\n  operand: Token;\r\n\r\n  constructor(operand: Token) {\r\n    super();\r\n    this.operand = operand;\r\n  }\r\n}\r\n","import ExpressionNode from \"./ExpressionNode\";\r\nimport Token from \"../Token\";\r\n\r\nexport default class BinOperationNode extends ExpressionNode {\r\n  operator: Token;\r\n  leftNode: ExpressionNode;\r\n  rightNode: ExpressionNode;\r\n\r\n  constructor(\r\n    operator: Token,\r\n    leftNode: ExpressionNode,\r\n    rightNode: ExpressionNode\r\n  ) {\r\n    super();\r\n    this.operator = operator;\r\n    this.leftNode = leftNode;\r\n    this.rightNode = rightNode;\r\n  }\r\n}\r\n","import Token from \"../Token\";\r\nimport ExpressionNode from \"./ExpressionNode\";\r\n\r\nexport default class UnarOperationNode {\r\n  operator: Token;\r\n  operand: ExpressionNode;\r\n\r\n  constructor(operator: Token, operand: ExpressionNode) {\r\n    this.operator = operator;\r\n    this.operand = operand;\r\n  }\r\n}\r\n","import ExpressionNode from \"./ExpressionNode\";\r\nimport Token from \"../Token\";\r\n\r\nexport default class FunctionNode extends ExpressionNode {\r\n  function_: Token;\r\n\r\n  constructor(func: Token) {\r\n    super();\r\n    this.function_ = func;\r\n  }\r\n}\r\n","import Token from \"./Token\";\r\nimport TokenType, { tokenTypesList } from \"./TokenType\";\r\nimport ExpressionNode from \"./AST/ExpressionNode\";\r\nimport StatementsNode from \"./AST/StatementsNode\";\r\nimport NumberNode from \"./AST/NumberNode\";\r\nimport VariableNode from \"./AST/VariableNode\";\r\nimport OperandNode from \"./AST/OperandNode\";\r\nimport BinOperationNode from \"./AST/BinOperationNode\";\r\nimport UnarOperationNode from \"./AST/UnarOperationNode\";\r\nimport FunctionNode from \"./AST/FunctionNode\";\r\n\r\nexport default class Parser {\r\n  tokens: Token[];\r\n  pos: number = 0;\r\n  scope: any = {};\r\n\r\n  constructor(tokens: Token[]) {\r\n    this.tokens = tokens;\r\n  }\r\n\r\n  match(...expected: TokenType[]): Token | null {\r\n    if (this.pos < this.tokens.length) {\r\n      const currentToken = this.tokens[this.pos];\r\n      if (expected.find((type) => type.name === currentToken.type.name)) {\r\n        this.pos += 1;\r\n        return currentToken;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  require(...expected: TokenType[]): Token {\r\n    const token = this.match(...expected);\r\n    if (!token) {\r\n      throw new Error(`на позиции ${this.pos} ожидается ${expected[0].name}`);\r\n    }\r\n    return token;\r\n  }\r\n\r\n  parseVariableOrNumberOrOperand(): ExpressionNode {\r\n    const number = this.match(tokenTypesList.NUMBER);\r\n    if (number != null) {\r\n      return new NumberNode(number);\r\n    }\r\n    const variable = this.match(tokenTypesList.VARIABLE);\r\n    if (variable != null) {\r\n      return new VariableNode(variable);\r\n    }\r\n\r\n    const operand = this.match(tokenTypesList.OPERAND);\r\n    if (operand != null) {\r\n      return new OperandNode(operand);\r\n    }\r\n\r\n    const func = this.match(tokenTypesList.FUNCTION);\r\n    if (func != null) {\r\n      return new FunctionNode(func);\r\n    }\r\n\r\n    throw new Error(\r\n      `Ожидается (переменная/число/операнд) на ${this.pos} позиции`\r\n    );\r\n  }\r\n\r\n  parseReturn(): ExpressionNode {\r\n    const operatorReturn = this.match(tokenTypesList.RETURN);\r\n    if (operatorReturn != null) {\r\n      return new UnarOperationNode(operatorReturn, this.parseFormula());\r\n    }\r\n    throw new Error(`Ожидается унарный оператор RETURN на ${this.pos} позиции`);\r\n  }\r\n\r\n  parseParentheses(): ExpressionNode {\r\n    if (this.match(tokenTypesList.LPAR) != null) {\r\n      const node = this.parseFormula();\r\n      this.require(tokenTypesList.RPAR);\r\n      return node;\r\n    } else {\r\n      return this.parseVariableOrNumberOrOperand();\r\n    }\r\n  }\r\n\r\n  parseFormula(): ExpressionNode {\r\n    let leftNode = this.parseParentheses();\r\n    let operator = this.match(\r\n      tokenTypesList.MINUS,\r\n      tokenTypesList.PLUS,\r\n      tokenTypesList.DIVIDE,\r\n      tokenTypesList.MULTIPLY\r\n    );\r\n    while (operator != null) {\r\n      const rightNode = this.parseParentheses();\r\n      leftNode = new BinOperationNode(operator, leftNode, rightNode);\r\n      operator = this.match(\r\n        tokenTypesList.MINUS,\r\n        tokenTypesList.PLUS,\r\n        tokenTypesList.DIVIDE,\r\n        tokenTypesList.MULTIPLY\r\n      );\r\n    }\r\n    return leftNode;\r\n  }\r\n\r\n  parseExpression(): ExpressionNode {\r\n    if (this.match(tokenTypesList.VARIABLE) == null) {\r\n      const returnNode = this.parseReturn();\r\n      return returnNode;\r\n    }\r\n    this.pos -= 1;\r\n    let variableNode = this.parseVariableOrNumberOrOperand();\r\n    const assignOperator = this.match(tokenTypesList.ASSIGN);\r\n    if (assignOperator != null) {\r\n      const rightFormulaNode = this.parseFormula();\r\n      const binaryNode = new BinOperationNode(\r\n        assignOperator,\r\n        variableNode,\r\n        rightFormulaNode\r\n      );\r\n      return binaryNode;\r\n    }\r\n    throw new Error(\r\n      `После переменной ожидается оператор присвоения на позиции ${this.pos}`\r\n    );\r\n  }\r\n\r\n  parseCode(): ExpressionNode {\r\n    const root = new StatementsNode();\r\n    while (this.pos < this.tokens.length) {\r\n      const codeStringNode = this.parseExpression();\r\n      this.require(tokenTypesList.SEMICOLON);\r\n      root.addNode(codeStringNode);\r\n    }\r\n    return root;\r\n  }\r\n\r\n  //   run(node: ExpressionNode): any {\r\n  //     if (node instanceof NumberNode) {\r\n  //       return parseInt(node.number.text);\r\n  //     }\r\n  //     if (node instanceof UnarOperationNode) {\r\n  //       switch (node.operator.type.name) {\r\n  //         case tokenTypesList.LOG.name:\r\n  //           console.log(this.run(node.operand));\r\n  //           return;\r\n  //       }\r\n  //     }\r\n  //     if (node instanceof BinOperationNode) {\r\n  //       switch (node.operator.type.name) {\r\n  //         case tokenTypesList.PLUS.name:\r\n  //           return this.run(node.leftNode) + this.run(node.rightNode);\r\n  //         case tokenTypesList.MINUS.name:\r\n  //           return this.run(node.leftNode) - this.run(node.rightNode);\r\n  //         case tokenTypesList.ASSIGN.name:\r\n  //           const result = this.run(node.rightNode);\r\n  //           const variableNode = <VariableNode>node.leftNode;\r\n  //           this.scope[variableNode.variable.text] = result;\r\n  //           return result;\r\n  //       }\r\n  //     }\r\n  //     if (node instanceof VariableNode) {\r\n  //       if (this.scope[node.variable.text]) {\r\n  //         return this.scope[node.variable.text];\r\n  //       } else {\r\n  //         throw new Error(\r\n  //           `Переменная с названием ${node.variable.text} не обнаружена`\r\n  //         );\r\n  //       }\r\n  //     }\r\n  //     if (node instanceof StatementsNode) {\r\n  //       node.codeStrings.forEach((codeString) => {\r\n  //         this.run(codeString);\r\n  //       });\r\n  //       return;\r\n  //     }\r\n  //     throw new Error(\"Ошибка!\");\r\n  //   }\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store/store\";\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { ScriptTarget } from \"typescript\";\r\nimport type { RootState } from \"./store\";\r\n\r\ninterface CodeSlice {\r\n  value: string;\r\n  index: number;\r\n  brace: boolean;\r\n  update_tree: boolean;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: CodeSlice = {\r\n  value: \"\",\r\n  index: 0,\r\n  brace: false,\r\n  update_tree: false,\r\n};\r\n\r\nexport const codeSlice = createSlice({\r\n  name: \"code\",\r\n  initialState,\r\n  reducers: {\r\n    setCode: (state, action: PayloadAction<string>) => {\r\n      state.value = action.payload;\r\n    },\r\n    setCurrentIndex: (state, action: PayloadAction<number>) => {\r\n      state.index = action.payload;\r\n    },\r\n    toggleBrace: (state) => {\r\n      state.brace = !state.brace;\r\n    },\r\n    updateTree: (state) => {\r\n      state.update_tree = !state.update_tree;\r\n    },\r\n    // incrementByAmount: (state, action: PayloadAction<number>) => {\r\n    //   state.value += action.payload;\r\n    // },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { setCode, setCurrentIndex, toggleBrace, updateTree } =\r\n  codeSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const getCode = (state: RootState) => state.code.value;\r\n\r\nexport const getCurrentIndex = (state: RootState) => state.code.index;\r\n\r\nexport const getBrace = (state: RootState) => state.code.brace;\r\n\r\nexport const getUpdateTree = (state: RootState) => state.code.update_tree;\r\n\r\nexport default codeSlice.reducer;\r\n","export class TreeNode {\r\n  type: \"OPERATOR\" | \"OPERAND\" | \"FUNCTION\";\r\n  index: number;\r\n  value: string;\r\n  left: TreeNode | null;\r\n  right: TreeNode | null;\r\n  args: TreeNode[];\r\n  add_nodes: boolean;\r\n  user_input: boolean;\r\n  static count: number = 0;\r\n\r\n  constructor(index: number = 0) {\r\n    this.index = index;\r\n    this.type = \"OPERAND\";\r\n    this.value = \"\";\r\n    this.left = null;\r\n    this.right = null;\r\n    this.args = [];\r\n    this.user_input = false;\r\n    this.add_nodes = false;\r\n  }\r\n\r\n  setValue(value: string) {\r\n    this.value = value;\r\n  }\r\n\r\n  addArguments(quantity: number) {\r\n    while (quantity > 0) {\r\n      TreeNode.count++;\r\n      this.args.push(new TreeNode(TreeNode.count));\r\n      quantity--;\r\n    }\r\n  }\r\n\r\n  setLeft() {\r\n    TreeNode.count++;\r\n    this.left = new TreeNode(TreeNode.count);\r\n  }\r\n\r\n  setRight() {\r\n    TreeNode.count++;\r\n    this.right = new TreeNode(TreeNode.count);\r\n  }\r\n}\r\nclass Tree {\r\n  root: TreeNode = new TreeNode();\r\n\r\n  find(index: number) {\r\n    if (this.root.index === index) {\r\n      return this.root;\r\n    } else if (this.root.type === \"OPERAND\" || this.root.type === \"OPERATOR\")\r\n      return (\r\n        this._find(this.root.left, index) || this._find(this.root.right, index)\r\n      );\r\n    else if (this.root.type === \"FUNCTION\")\r\n      return (\r\n        this._find(this.root.args[0], index) ||\r\n        this._find(this.root.args[1], index) ||\r\n        this._find(this.root.args[2], index) ||\r\n        this._find(this.root.args[3], index) ||\r\n        this._find(this.root.args[4], index) ||\r\n        this._find(this.root.args[5], index) ||\r\n        this._find(this.root.args[6], index) ||\r\n        this._find(this.root.args[7], index) ||\r\n        this._find(this.root.args[8], index) ||\r\n        this._find(this.root.args[9], index)\r\n      );\r\n    else return null;\r\n  }\r\n\r\n  _find(node: TreeNode | null, index: number): any {\r\n    if (node) {\r\n      if (node.index === index) return node;\r\n      else if (node.type === \"OPERAND\" || node.type === \"OPERATOR\")\r\n        return this._find(node.left, index) || this._find(node.right, index);\r\n      else if (node.type === \"FUNCTION\")\r\n        return (\r\n          this._find(node.args[0], index) ||\r\n          this._find(node.args[1], index) ||\r\n          this._find(node.args[2], index) ||\r\n          this._find(node.args[3], index) ||\r\n          this._find(node.args[4], index) ||\r\n          this._find(node.args[5], index) ||\r\n          this._find(node.args[6], index) ||\r\n          this._find(node.args[7], index) ||\r\n          this._find(node.args[8], index) ||\r\n          this._find(node.args[9], index)\r\n        );\r\n      else return null;\r\n    }\r\n  }\r\n\r\n  delete(index: number) {\r\n    if (this.root.index === index) this.root = new TreeNode();\r\n    else if (this.root.left && this.root.left.index === index)\r\n      this.root.left = new TreeNode(this.root.left.index);\r\n    else if (this.root.right && this.root.right.index === index)\r\n      this.root.right = new TreeNode(this.root.right.index);\r\n    else if (this.root.type === \"FUNCTION\") {\r\n      for (let i = 0; i < this.root.args.length; i++) {\r\n        if (this.root.args[i].index === index)\r\n          this.root.args[i] = new TreeNode(this.root.args[i].index);\r\n      }\r\n      return (\r\n        this._delete(this.root.args[0], index) ||\r\n        this._delete(this.root.args[1], index) ||\r\n        this._delete(this.root.args[2], index) ||\r\n        this._delete(this.root.args[3], index) ||\r\n        this._delete(this.root.args[4], index) ||\r\n        this._delete(this.root.args[5], index) ||\r\n        this._delete(this.root.args[6], index) ||\r\n        this._delete(this.root.args[7], index) ||\r\n        this._delete(this.root.args[8], index) ||\r\n        this._delete(this.root.args[9], index)\r\n      );\r\n    } else\r\n      return (\r\n        this._delete(this.root.left, index) ||\r\n        this._delete(this.root.right, index)\r\n      );\r\n  }\r\n\r\n  _delete(node: TreeNode | null, index: number): any {\r\n    if (node) {\r\n      if (node.index === index) node = new TreeNode(node.index);\r\n      else if (node.left && node.left.index === index)\r\n        node.left = new TreeNode(node.left.index);\r\n      else if (node.right && node.right.index === index)\r\n        node.right = new TreeNode(node.right.index);\r\n      else if (node.type === \"FUNCTION\") {\r\n        for (let i = 0; i < node.args.length; i++) {\r\n          if (node.args[i].index === index)\r\n            node.args[i] = new TreeNode(node.args[i].index);\r\n        }\r\n        return (\r\n          this._delete(node.args[0], index) ||\r\n          this._delete(node.args[1], index) ||\r\n          this._delete(node.args[2], index) ||\r\n          this._delete(node.args[3], index) ||\r\n          this._delete(node.args[4], index) ||\r\n          this._delete(node.args[5], index) ||\r\n          this._delete(node.args[6], index) ||\r\n          this._delete(node.args[7], index) ||\r\n          this._delete(node.args[8], index) ||\r\n          this._delete(node.args[9], index)\r\n        );\r\n      } else\r\n        return (\r\n          this._delete(node.left, index) || this._delete(node.right, index)\r\n        );\r\n    }\r\n  }\r\n\r\n  swap_with_left(index: number) {\r\n    const node = this.find(index);\r\n    const child = node.left;\r\n    if (node) {\r\n      if (node.type !== \"OPERATOR\" || child.type !== \"OPERATOR\") return false;\r\n      else {\r\n        [node.value, child.value] = [child.value, node.value];\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  swap_with_right(index: number) {\r\n    const node = this.find(index);\r\n    const child = node.right;\r\n    if (node) {\r\n      if (node.type !== \"OPERATOR\" || child.type !== \"OPERATOR\") return false;\r\n      else {\r\n        [node.value, child.value] = [child.value, node.value];\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default new Tree();\r\n","import { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n  })\r\n);\r\n","export const DATA = {\r\n  MEASURES: [\r\n    \"MEASURE_1\",\r\n    \"MEASURE_2\",\r\n    \"MEASURE_3\",\r\n    \"MEASURE_4\",\r\n    \"MEASURE_5\",\r\n    \"MEASURE_6\",\r\n    \"MEASURE_7\",\r\n    \"MEASURE_8\",\r\n    \"MEASURE_9\",\r\n    \"MEASURE_10\",\r\n  ],\r\n  FACTS: [\r\n    \"FACT_1\",\r\n    \"FACT_2\",\r\n    \"FACT_3\",\r\n    \"FACT_4\",\r\n    \"FACT_5\",\r\n    \"FACT_6\",\r\n    \"FACT_7\",\r\n    \"FACT_8\",\r\n    \"FACT_9\",\r\n    \"FACT_10\",\r\n  ],\r\n  VARIABLES: [\r\n    \"DISTANCE\",\r\n    \"LENGHT\",\r\n    \"HEIGHT\",\r\n    \"WEIGHT\",\r\n    \"LATITUDE\",\r\n    \"REPLICAS\",\r\n    \"CENTROID\",\r\n    \"BLOB\",\r\n    \"MAX_VAL\",\r\n    \"MIN_VAL\",\r\n    \"PI\",\r\n  ],\r\n  FUNCTIONS: [\r\n    \"curent_date\",\r\n    \"current_time\",\r\n    \"current_timestamp\",\r\n    \"now\",\r\n    \"concat\",\r\n    \"cahr_length\",\r\n    \"random\",\r\n    \"coalesce\",\r\n    \"between\",\r\n    \"in\",\r\n    \"not_in\",\r\n    \"like\",\r\n    \"ilike\",\r\n    \"startwith\",\r\n    \"endwith\",\r\n    \"contains\",\r\n    \"power\",\r\n    \"ln\",\r\n    \"exp\",\r\n    \"sqrt\",\r\n    \"abs\",\r\n    \"ceil\",\r\n    \"floor\",\r\n  ],\r\n  AGRGUMENTS: [\r\n    0, 0, 0, 0, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\r\n  ],\r\n  ADD_NODES: [\r\n    0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\r\n  ],\r\n};\r\n","import React from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport InboxIcon from \"@material-ui/icons/Inbox\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { setCode, getCurrentIndex, updateTree } from \"../../store/codeSlice\";\r\nimport Tree from \"../../Tree\";\r\nimport { useStyles } from \"./styles\";\r\nimport { DATA } from \"../../data\";\r\n\r\nexport default function SelectedListItem(props: any) {\r\n  const dispatch = useAppDispatch();\r\n  const index_in_tree = useAppSelector(getCurrentIndex);\r\n  const classes = useStyles();\r\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n  const handleListItemClick = (\r\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n    index: number,\r\n    value: string\r\n  ) => {\r\n    setSelectedIndex(index);\r\n    dispatch(setCode(value));\r\n    const node = Tree.find(index_in_tree);\r\n    if (node) {\r\n      node.value = value;\r\n      node.type = props.type === \"functions\" ? \"FUNCTION\" : \"OPERAND\";\r\n      node.left = null;\r\n      node.right = null;\r\n      node.user_input = false;\r\n\r\n      if (props.type === \"functions\") {\r\n        if (node.args.length !== DATA[\"AGRGUMENTS\"][index]) {\r\n          node.args = [];\r\n          node.addArguments(DATA[\"AGRGUMENTS\"][index]);\r\n          node.add_nodes = Boolean(DATA[\"ADD_NODES\"][index]);\r\n        }\r\n      }\r\n      dispatch(updateTree());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <List component=\"nav\">\r\n        {props.items.map((item: string, ind: number) => (\r\n          <ListItem\r\n            key={ind}\r\n            button\r\n            selected={selectedIndex === ind}\r\n            onClick={(event) => handleListItemClick(event, ind, item)}\r\n          >\r\n            <ListItemIcon>\r\n              <InboxIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary={item} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n}\r\n","import TextField from \"@material-ui/core/TextField\";\r\nimport React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport List from \"../List\";\r\nimport { DATA } from \"../../data\";\r\nimport { Divider } from \"@material-ui/core\";\r\n\r\nconst _keys = [\"FACTS\", \"MEASURES\", \"VARIABLES\"];\r\n\r\ntype SOME_KEYS = \"FACTS\" | \"MEASURES\" | \"VARIABLES\";\r\n\r\nexport const GlobalSearch: React.FC<{\r\n  func?: boolean;\r\n  pos: string;\r\n  left: string;\r\n  top: string;\r\n}> = ({ func, pos, left, top }) => {\r\n  return (\r\n    <Box width=\"270px\" position={pos} left={left} top={top}>\r\n      <TextField label={\"Поиск\"} style={{ width: \"90%\", margin: 10 }} />\r\n      <Box overflow=\"auto\" maxHeight=\"300px\">\r\n        {func ? (\r\n          <List items={DATA[\"FUNCTIONS\"]} />\r\n        ) : (\r\n          _keys.map((item: any) => (\r\n            <>\r\n              <List items={DATA[item as SOME_KEYS]} />\r\n              <Divider />\r\n            </>\r\n          ))\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { DATA } from \"../../data\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\nimport { TemporaryDrawer } from \"../Drawer\";\r\nimport { useEffect } from \"react\";\r\nimport Lexer from \"../../Lexer\";\r\nimport Parser from \"../../Parser\";\r\nimport { GlobalSearch } from \"../GlobalSearch\";\r\nimport { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { getCode, setCode } from \"../../store/codeSlice\";\r\n\r\nexport const TextInput = () => {\r\n  const value = useAppSelector(getCode);\r\n  const dispatch = useAppDispatch();\r\n  //   const [value, setValue] = useState(\"\");\r\n  const [showGlobal, setShowGlobal] = useState(false);\r\n  const [showFunc, setShowFunc] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const handleChange = (e: any) => {\r\n    dispatch(setCode(e.target.value));\r\n    // setValue(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const lexer = new Lexer(value);\r\n      lexer.lexAnalisys();\r\n      console.log(lexer.tokenList);\r\n      const parser = new Parser(lexer.tokenList);\r\n      const rootNode = parser.parseCode();\r\n      console.log(rootNode);\r\n      setError(\"\");\r\n    } catch (e) {\r\n      console.log(e.message);\r\n      setError(e.message);\r\n    }\r\n  }, [value]);\r\n  return (\r\n    <Box\r\n      width=\"100%\"\r\n      display=\"flex\"\r\n      height=\"600px\"\r\n      flexDirection=\"column\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n    >\r\n      {showFunc && <GlobalSearch func pos=\"absolute\" left=\"50px\" top=\"50px\" />}\r\n      {showGlobal && <GlobalSearch pos=\"absolute\" left=\"50px\" top=\"450px\" />}\r\n      <Box\r\n        width=\"60%\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        position=\"relative\"\r\n      >\r\n        <TextareaAutosize\r\n          style={{\r\n            outline: \"none\",\r\n            width: \"100%\",\r\n            height: \"300px\",\r\n            fontSize: 20,\r\n            padding: 20,\r\n          }}\r\n          value={value}\r\n          onChange={handleChange}\r\n        />\r\n        {error && (\r\n          <Alert\r\n            style={{ position: \"absolute\", bottom: 0, width: \"101%\" }}\r\n            severity=\"error\"\r\n          >\r\n            {error}\r\n          </Alert>\r\n        )}\r\n      </Box>\r\n      <Box display=\"flex\">\r\n        {/* <TemporaryDrawer data={DATA} /> */}\r\n        <Button onClick={() => setShowFunc(!showFunc)}>Func Search</Button>\r\n        <Button onClick={() => setShowGlobal(!showGlobal)}>\r\n          Global Search\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","export const mapping_list_types = new Map();\r\nmapping_list_types.set(\"functions\", \"Функции\");\r\nmapping_list_types.set(\"variables\", \"Переменные\");\r\nmapping_list_types.set(\"facts\", \"Факты\");\r\nmapping_list_types.set(\"measures\", \"Меры\");\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles(() => ({\r\n  text: {\r\n    width: \"90%\",\r\n    margin: 10,\r\n  },\r\n  wrapper: {\r\n    width: \"100%\",\r\n    overflow: \"hidden\",\r\n  },\r\n  box: {\r\n    maxHeight: 300,\r\n    overflow: \"auto\",\r\n    width: \"100%\",\r\n  },\r\n}));\r\n","import TextField from \"@material-ui/core/TextField\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport List from \"../List\";\r\nimport { mapping_list_types } from \"./mapping\";\r\nimport { useStyles } from \"./styles\";\r\n\r\nexport const Wrapper: React.FC<{ items: string[]; type: string }> = ({\r\n  items,\r\n  type,\r\n}) => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [filtered, setFiltered] = useState(items);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    setFiltered(() => items.filter((item) => item.includes(search)));\r\n  }, [search]);\r\n\r\n  return (\r\n    <Box className={classes.wrapper}>\r\n      <TextField\r\n        label={mapping_list_types.get(type)}\r\n        className={classes.text}\r\n        value={search}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n      />\r\n      <Box className={classes.box}>\r\n        <List items={filtered} type={type} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles(() => {\r\n  return {\r\n    list: {\r\n      width: 250,\r\n    },\r\n    fullList: {\r\n      width: \"auto\",\r\n    },\r\n    btn: {\r\n      margin: 10,\r\n    },\r\n  };\r\n});\r\n","import { TextField, Button, Box } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { updateTree, getCurrentIndex, setCode } from \"../../store/codeSlice\";\r\nimport Tree from \"../../Tree\";\r\n\r\ntype Props = {\r\n  setNode: any;\r\n};\r\n\r\nexport const UserInput: React.FC<Props> = ({ setNode }) => {\r\n  const dispatch = useAppDispatch();\r\n  const index = useAppSelector(getCurrentIndex);\r\n  const node = Tree.find(index);\r\n  const [value, setValue] = useState(node.user_input ? node.value : \"\");\r\n\r\n  const handleClick = () => {\r\n    dispatch(setCode(value));\r\n    node.type = \"OPERAND\";\r\n    node.left = null;\r\n    node.right = null;\r\n    node.user_input = true;\r\n    node.value = value;\r\n    dispatch(updateTree());\r\n    setNode(node);\r\n  };\r\n\r\n  return (\r\n    <Box display=\"flex\">\r\n      <TextField\r\n        style={{ width: 200, alignSelf: \"center\" }}\r\n        placeholder=\"Пользовательский ввод\"\r\n        value={value}\r\n        onChange={(e) => setValue(e.target.value)}\r\n      />\r\n      <Button onClick={handleClick}>Ok</Button>\r\n    </Box>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/greater.0b809112.svg\";","export default __webpack_public_path__ + \"static/media/less.b6d28bd9.svg\";","export default __webpack_public_path__ + \"static/media/plus.47d179f1.svg\";","export default __webpack_public_path__ + \"static/media/minus.ed1583fb.svg\";","export default __webpack_public_path__ + \"static/media/eq.4fdaf4b3.svg\";","export default __webpack_public_path__ + \"static/media/mult.05cf6c7f.svg\";","export default __webpack_public_path__ + \"static/media/divide.4be7e1d6.svg\";","export default __webpack_public_path__ + \"static/media/gre_or_eq.9ca96bb8.svg\";","export default __webpack_public_path__ + \"static/media/less_or_eq.e676b311.svg\";","export default __webpack_public_path__ + \"static/media/not_eq.c6d2affe.svg\";","import greater from \"./greater.svg\";\r\nimport less from \"./less.svg\";\r\nimport plus from \"./plus.svg\";\r\nimport minus from \"./minus.svg\";\r\nimport eq from \"./eq.svg\";\r\nimport mult from \"./mult.svg\";\r\nimport divide from \"./divide.svg\";\r\nimport gre_or_eq from \"./gre_or_eq.svg\";\r\nimport less_or_eq from \"./less_or_eq.svg\";\r\nimport not_eq from \"./not_eq.svg\";\r\n\r\ntype Props = {\r\n  value: string;\r\n};\r\n\r\nexport const CustomIcon: React.FC<Props> = ({ value }) => {\r\n  const getIcon = (value: string) => {\r\n    switch (value) {\r\n      case \"+\":\r\n        return <img src={plus} width={20} height={20} alt=\"+\" />;\r\n      case \"-\":\r\n        return <img src={minus} width={20} height={20} alt=\"-\" />;\r\n      case \"<\":\r\n        return <img src={less} width={20} height={20} alt=\"<\" />;\r\n      case \"<=\":\r\n        return <img src={less_or_eq} width={20} height={20} alt=\"<=\" />;\r\n      case \">\":\r\n        return <img src={greater} width={20} height={20} alt=\">\" />;\r\n      case \">=\":\r\n        return <img src={gre_or_eq} width={20} height={20} alt=\">=\" />;\r\n      case \"!=\":\r\n        return <img src={not_eq} width={20} height={20} alt=\"!=\" />;\r\n      case \"==\":\r\n        return <img src={eq} width={20} height={20} alt=\"==\" />;\r\n      case \"*\":\r\n        return <img src={mult} width={20} height={20} alt=\"*\" />;\r\n      case \"/\":\r\n        return <img src={divide} width={20} height={20} alt=\"/\" />;\r\n      default:\r\n        return value;\r\n    }\r\n  };\r\n\r\n  return <>{getIcon(value)}</>;\r\n};\r\n","import Box from \"@material-ui/core/Box\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useStyles } from \"./styles\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { setCode, toggleBrace, updateTree } from \"../../store/codeSlice\";\r\nimport { UserInput } from \"../UserInput\";\r\nimport { CustomIcon } from \"../CustomIcon\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n  setNode: any;\r\n};\r\n\r\nexport const CustomButtons: React.FC<Props> = ({ node, setNode }) => {\r\n  const classes = useStyles();\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <Box display=\"flex\" justifyContent=\"center\">\r\n      <UserInput setNode={setNode} />\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"+\"));\r\n          if (node) {\r\n            node.value = \"+\";\r\n            node.type = \"OPERATOR\";\r\n            node.user_input = false;\r\n            if (!node.left) node.setLeft();\r\n            if (!node.right) node.setRight();\r\n          }\r\n          dispatch(updateTree());\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        <CustomIcon value=\"+\" />\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"-\"));\r\n          if (node) {\r\n            node.value = \"-\";\r\n            node.type = \"OPERATOR\";\r\n            node.user_input = false;\r\n            if (!node.left) node.setLeft();\r\n            if (!node.right) node.setRight();\r\n          }\r\n          dispatch(updateTree());\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        <CustomIcon value=\"-\" />\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"*\"));\r\n          if (node) {\r\n            node.value = \"*\";\r\n            node.type = \"OPERATOR\";\r\n            node.user_input = false;\r\n            if (!node.left) node.setLeft();\r\n            if (!node.right) node.setRight();\r\n          }\r\n          dispatch(updateTree());\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        <CustomIcon value=\"*\" />\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"/\"));\r\n          if (node) {\r\n            node.value = \"/\";\r\n            node.type = \"OPERATOR\";\r\n            node.user_input = false;\r\n            if (!node.left) node.setLeft();\r\n            if (!node.right) node.setRight();\r\n          }\r\n          dispatch(updateTree());\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        <CustomIcon value=\"/\" />\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"OR\"));\r\n          if (node) {\r\n            node.value = \"OR\";\r\n            node.type = \"OPERATOR\";\r\n            node.user_input = false;\r\n            if (!node.left) node.setLeft();\r\n            if (!node.right) node.setRight();\r\n          }\r\n          dispatch(updateTree());\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        OR\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"AND\"));\r\n          if (node) {\r\n            node.value = \"AND\";\r\n            node.type = \"OPERATOR\";\r\n            node.user_input = false;\r\n            if (!node.left) node.setLeft();\r\n            if (!node.right) node.setRight();\r\n          }\r\n          dispatch(updateTree());\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        AND\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"NOT\"));\r\n          if (node) {\r\n            node.value = \"NOT\";\r\n            node.type = \"FUNCTION\";\r\n            node.user_input = false;\r\n            if (!node.left) node.addArguments(1);\r\n          }\r\n          dispatch(updateTree());\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        NOT\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"<\"));\r\n          if (node) {\r\n            node.value = \"<\";\r\n            node.type = \"OPERATOR\";\r\n            node.user_input = false;\r\n            if (!node.left) node.setLeft();\r\n            if (!node.right) node.setRight();\r\n          }\r\n          dispatch(updateTree());\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        <CustomIcon value=\"<\" />\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"<=\"));\r\n          if (node) {\r\n            node.value = \"<=\";\r\n            node.type = \"OPERATOR\";\r\n            node.user_input = false;\r\n            if (!node.left) node.setLeft();\r\n            if (!node.right) node.setRight();\r\n          }\r\n          dispatch(updateTree());\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        <CustomIcon value=\"<=\" />\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"==\"));\r\n          if (node) {\r\n            node.value = \"==\";\r\n            node.type = \"OPERATOR\";\r\n            node.user_input = false;\r\n            if (!node.left) node.setLeft();\r\n            if (!node.right) node.setRight();\r\n          }\r\n          dispatch(updateTree());\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        <CustomIcon value=\"==\" />\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"!=\"));\r\n          if (node) {\r\n            node.value = \"!=\";\r\n            node.type = \"OPERATOR\";\r\n            node.user_input = false;\r\n            if (!node.left) node.setLeft();\r\n            if (!node.right) node.setRight();\r\n          }\r\n          dispatch(updateTree());\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        <CustomIcon value=\"!=\" />\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\">\"));\r\n          if (node) {\r\n            node.value = \">\";\r\n            node.type = \"OPERATOR\";\r\n            node.user_input = false;\r\n            if (!node.left) node.setLeft();\r\n            if (!node.right) node.setRight();\r\n          }\r\n          dispatch(updateTree());\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        <CustomIcon value=\">\" />\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\">=\"));\r\n          if (node) {\r\n            node.value = \">=\";\r\n            node.type = \"OPERATOR\";\r\n            node.user_input = false;\r\n            if (!node.left) node.setLeft();\r\n            if (!node.right) node.setRight();\r\n          }\r\n          dispatch(updateTree());\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        <CustomIcon value=\">=\" />\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(toggleBrace());\r\n          dispatch(updateTree());\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        ()\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { Wrapper } from \"../Wrapper\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { setCurrentIndex, updateTree } from \"../../store/codeSlice\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tree from \"../../Tree\";\r\nimport { DATA } from \"../../data\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport SyncAltIcon from \"@material-ui/icons/SyncAlt\";\r\nimport { CustomButtons } from \"../CustomButtons\";\r\nimport { CustomIcon } from \"../CustomIcon\";\r\n\r\nexport const TemporaryDrawer: React.FC<{\r\n  index: number;\r\n  value?: string;\r\n}> = ({ index, value }) => {\r\n  const dispatch = useAppDispatch();\r\n  const [state, setState] = React.useState(false);\r\n  const [show_delete, setShowDelete] = useState(false);\r\n  const [node, setNode] = useState(Tree.find(index));\r\n\r\n  const toggleDrawer =\r\n    (open: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\r\n      if (\r\n        event.type === \"keydown\" &&\r\n        ((event as React.KeyboardEvent).key === \"Tab\" ||\r\n          (event as React.KeyboardEvent).key === \"Shift\")\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      dispatch(setCurrentIndex(index));\r\n      setState(open);\r\n    };\r\n\r\n  const handleDelete = (e: any) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    Tree.delete(index);\r\n    node.user_input = false;\r\n    dispatch(updateTree());\r\n  };\r\n\r\n  const handleSwapLeft = (e: any) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    Tree.swap_with_left(index);\r\n    dispatch(updateTree());\r\n  };\r\n\r\n  const handleSwapRight = (e: any) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    Tree.swap_with_right(index);\r\n    dispatch(updateTree());\r\n  };\r\n\r\n  const list = () => (\r\n    <Box display=\"flex\">\r\n      <Wrapper items={DATA[\"FUNCTIONS\"]} type=\"functions\" />\r\n      <Wrapper items={DATA[\"FACTS\"]} type=\"facts\" />\r\n      <Wrapper items={DATA[\"MEASURES\"]} type=\"measures\" />\r\n      <Wrapper items={DATA[\"VARIABLES\"]} type=\"variables\" />\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {value ? (\r\n        <Button\r\n          onClick={toggleDrawer(true)}\r\n          disableRipple={true}\r\n          style={{ position: \"relative\" }}\r\n          onMouseEnter={() => setShowDelete(true)}\r\n          onMouseLeave={() => setShowDelete(false)}\r\n        >\r\n          {node.user_input ? (\r\n            <Box color=\"red\">\"{value}\"</Box>\r\n          ) : (\r\n            <CustomIcon value={value} />\r\n          )}\r\n          {show_delete && (\r\n            <IconButton\r\n              size=\"small\"\r\n              onClick={handleDelete}\r\n              style={{ position: \"absolute\", top: -5, right: -5 }}\r\n            >\r\n              <ClearIcon style={{ fontSize: 15 }} />\r\n            </IconButton>\r\n          )}\r\n          {show_delete && node.left && node.left.type === \"OPERATOR\" && (\r\n            <IconButton\r\n              size=\"small\"\r\n              onClick={handleSwapLeft}\r\n              style={{ position: \"absolute\", top: 7, left: -5 }}\r\n            >\r\n              <SyncAltIcon style={{ fontSize: 15 }} />\r\n            </IconButton>\r\n          )}\r\n          {show_delete && node.right && node.right.type === \"OPERATOR\" && (\r\n            <IconButton\r\n              size=\"small\"\r\n              onClick={handleSwapRight}\r\n              style={{ position: \"absolute\", top: 7, right: -5 }}\r\n            >\r\n              <SyncAltIcon style={{ fontSize: 15 }} />\r\n            </IconButton>\r\n          )}\r\n        </Button>\r\n      ) : (\r\n        <IconButton onClick={toggleDrawer(true)}>\r\n          <AddIcon />\r\n        </IconButton>\r\n      )}\r\n\r\n      <Drawer anchor={\"bottom\"} open={state} onClose={toggleDrawer(false)}>\r\n        <CustomButtons node={node} setNode={setNode} />\r\n        {list()}\r\n      </Drawer>\r\n    </div>\r\n  );\r\n};\r\n","import { TemporaryDrawer } from \"../Drawer\";\r\n\r\ntype Props = {\r\n  value?: string;\r\n  index?: number;\r\n};\r\n\r\nexport const Leaf: React.FC<Props> = ({ value = \"\", index }) => {\r\n  return <TemporaryDrawer index={index || 0} value={value} />;\r\n};\r\n","import { makeStyles, Theme } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles<Theme, { state: boolean }>({\r\n  box: {\r\n    cursor: \"pointer\",\r\n    margin: 5,\r\n    padding: 5,\r\n    borderLeft: ({ state }) => (state ? \"2px solid black\" : \"none\"),\r\n    borderRight: ({ state }) => (state ? \"2px solid black\" : \"none\"),\r\n    flexDirection: ({ state }) => (state ? \"column\" : \"row\"),\r\n    alignItems: \"center\",\r\n    display: \"flex\",\r\n    borderRadius: 10,\r\n  },\r\n  typography: {\r\n    margin: 5,\r\n    fontSize: 25,\r\n  },\r\n  mid: {\r\n    padding: 15,\r\n    fontSize: 25,\r\n  },\r\n});\r\n","import { Box } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Leaf } from \"../Leaf\";\r\nimport { Node } from \"../Node\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport { useState } from \"react\";\r\nimport { useStyles } from \"./styles\";\r\nimport { TemporaryDrawer } from \"../Drawer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { updateTree } from \"../../store/codeSlice\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n};\r\n\r\nexport const Func: React.FC<Props> = ({ node }) => {\r\n  const dispatch = useAppDispatch();\r\n  const [state, setState] = useState<boolean>(false);\r\n  const [show, setShow] = useState(false);\r\n  const classes = useStyles({ state });\r\n  const handleClick = () => setState(!state);\r\n\r\n  const getComponent = (node: TreeNode) => {\r\n    switch (node.type) {\r\n      case \"FUNCTION\":\r\n        return <Func node={node} />;\r\n\r\n      case \"OPERATOR\":\r\n        return <Node node={node} />;\r\n      default:\r\n        return <Leaf value={node.value} index={node.index} />;\r\n    }\r\n  };\r\n\r\n  const handleAddClick = () => {\r\n    node.addArguments(1);\r\n    dispatch(updateTree());\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      alignItems=\"center\"\r\n      onMouseEnter={() => setShow(true)}\r\n      onMouseLeave={() => setShow(false)}\r\n    >\r\n      <TemporaryDrawer index={node.index} value={node.value} />\r\n      {!state && <Typography className={classes.typography}>(</Typography>}\r\n      <Box className={classes.box}>\r\n        {node.args &&\r\n          node.args.map((arg: TreeNode, i: number) => {\r\n            return i === node.args.length - 1 ? (\r\n              getComponent(arg)\r\n            ) : (\r\n              <>\r\n                {getComponent(arg)}\r\n                <Typography className={classes.mid} onClick={handleClick}>\r\n                  ,\r\n                </Typography>\r\n              </>\r\n            );\r\n          })}\r\n        {node.add_nodes && show && node.args.length < 10 && (\r\n          <IconButton size=\"small\" onClick={handleAddClick}>\r\n            <AddIcon style={{ fontSize: 15 }} />\r\n          </IconButton>\r\n        )}\r\n      </Box>\r\n\r\n      {!state && <Typography className={classes.typography}>)</Typography>}\r\n    </Box>\r\n  );\r\n};\r\n","import { makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles<Theme, { state: boolean; brace: boolean }>({\r\n  box: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    flexDirection: ({ state }) => (state ? \"column\" : \"row\"),\r\n    cursor: \"pointer\",\r\n    borderLeft: ({ brace }) => (brace ? \"2px solid black\" : \"none\"),\r\n    borderRight: ({ brace }) => (brace ? \"2px solid black\" : \"none\"),\r\n    margin: 5,\r\n    padding: 5,\r\n    position: \"relative\",\r\n    borderRadius: 10,\r\n  },\r\n  mid: {\r\n    margin: 15,\r\n    fontSize: 25,\r\n  },\r\n  btn: {\r\n    position: \"absolute\",\r\n    top: -18,\r\n    right: -12,\r\n  },\r\n  icon: {\r\n    fontSize: 15,\r\n  },\r\n});\r\n","import { Box } from \"@material-ui/core\";\r\nimport { Leaf } from \"../Leaf\";\r\nimport { useState } from \"react\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport { useAppSelector } from \"../../hooks\";\r\nimport { getBrace } from \"../../store/codeSlice\";\r\nimport { Func } from \"../Func\";\r\nimport { useStyles } from \"./styles\";\r\nimport { TemporaryDrawer } from \"../Drawer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AutorenewIcon from \"@material-ui/icons/Autorenew\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n};\r\n\r\nexport const Node: React.FC<Props> = ({ node }) => {\r\n  const brace = useAppSelector(getBrace);\r\n  const [state, setState] = useState(false);\r\n  const [visible, setVisible] = useState(false);\r\n  const classes = useStyles({ state, brace });\r\n\r\n  const handleClick = () => setState(!state);\r\n\r\n  return (\r\n    <Box\r\n      className={classes.box}\r\n      onMouseEnter={() => setVisible(true)}\r\n      onMouseLeave={() => setVisible(false)}\r\n    >\r\n      {visible && (\r\n        <IconButton\r\n          onClick={handleClick}\r\n          className={classes.btn}\r\n          size={\"small\"}\r\n        >\r\n          <AutorenewIcon className={classes.icon} />\r\n        </IconButton>\r\n      )}\r\n      {node.left && node.left.type !== \"OPERAND\" ? (\r\n        node.left.type === \"FUNCTION\" ? (\r\n          <Func node={node.left} />\r\n        ) : (\r\n          <Node node={node.left} />\r\n        )\r\n      ) : (\r\n        <Leaf\r\n          value={node.left ? node.left.value : \"\"}\r\n          index={node.left ? node.left.index : 0}\r\n        />\r\n      )}\r\n      <TemporaryDrawer index={node.index} value={node.value} />\r\n      {node.right && node.right.type !== \"OPERAND\" ? (\r\n        node.right.type === \"FUNCTION\" ? (\r\n          <Func node={node.right} />\r\n        ) : (\r\n          <Node node={node.right} />\r\n        )\r\n      ) : (\r\n        <Leaf\r\n          value={node.right ? node.right.value : \"\"}\r\n          index={node.right ? node.right.index : 0}\r\n        />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles(() => ({\r\n  box: {\r\n    width: 1000,\r\n    height: 700,\r\n    border: \"1px solid black\",\r\n    margin: \"auto\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n  },\r\n}));\r\n","import Box from \"@material-ui/core/Box\";\r\nimport { Leaf } from \"../Leaf\";\r\nimport { Node } from \"../Node\";\r\nimport { Func } from \"../Func\";\r\nimport Tree, { TreeNode } from \"../../Tree\";\r\nimport { useEffect } from \"react\";\r\nimport { useAppSelector } from \"../../hooks\";\r\nimport { getUpdateTree } from \"../../store/codeSlice\";\r\nimport { useStyles } from \"./styles\";\r\n\r\nexport const VisualBuilder = () => {\r\n  const update_tree = useAppSelector(getUpdateTree);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    traversTree(Tree.root);\r\n  }, [update_tree]);\r\n\r\n  const traversTree = (node: TreeNode) => {\r\n    if (node.type === \"OPERAND\")\r\n      return <Leaf value={node.value} index={node.index} />;\r\n    else if (node.type === \"FUNCTION\") return <Func node={node} />;\r\n    else return <Node node={node} />;\r\n  };\r\n\r\n  return (\r\n    <Box className={classes.box}>\r\n      <Box margin=\"auto\">{traversTree(Tree.root)}</Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { TextInput } from \"../TextInput\";\r\nimport { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { VisualBuilder } from \"../VisualBuilder\";\r\n\r\nexport const App = () => {\r\n  const [view, setView] = useState(false);\r\n\r\n  const handleClick = () => false;\r\n  return (\r\n    <>\r\n      <Button onClick={handleClick}>{view ? \"Text\" : \"Visual\"}</Button>\r\n      {view ? <TextInput /> : <VisualBuilder />}\r\n    </>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport codeReducer from \"./codeSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    code: codeReducer,\r\n  },\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./components/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}