{"version":3,"sources":["Token.ts","TokenType.ts","Lexer.ts","AST/ExpressionNode.ts","AST/StatementsNode.ts","AST/NumberNode.ts","AST/VariableNode.ts","AST/OperandNode.ts","AST/BinOperationNode.ts","AST/UnarOperationNode.ts","AST/FunctionNode.ts","Parser.ts","hooks.ts","store/codeSlice.ts","Tree.ts","components/List/index.tsx","data/index.ts","components/GlobalSearch/index.tsx","components/TextInput/index.tsx","components/Wrapper/index.tsx","components/Drawer/index.tsx","components/Leaf/index.tsx","components/Func/index.tsx","components/Node/index.tsx","components/VisualBuilder/index.tsx","components/App/index.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["Token","type","text","pos","this","TokenType","name","regexp","tokenTypesList","NUMBER","VARIABLE","OPERAND","FUNCTION","SEMICOLON","SPACE","ASSIGN","RETURN","PLUS","MINUS","DIVIDE","MULTIPLY","LPAR","RPAR","Lexer","code","tokenList","nextToken","filter","token","length","tokenTypeValues","Object","values","i","tokenType","RegExp","result","substr","match","push","Error","ExpressionNode","StatementsNode","codeStrings","node","NumberNode","number","VariableNode","variable","OperandNode","operand","BinOperationNode","operator","leftNode","rightNode","UnarOperationNode","FunctionNode","func","function_","Parser","tokens","scope","currentToken","expected","find","operatorReturn","parseFormula","require","parseVariableOrNumberOrOperand","parseParentheses","parseReturn","variableNode","assignOperator","rightFormulaNode","root","codeStringNode","parseExpression","addNode","useAppDispatch","useDispatch","useAppSelector","useSelector","codeSlice","createSlice","initialState","value","index","brace","reducers","setCode","state","action","payload","setCurrentIndex","toggleBrace","actions","getCode","getCurrentIndex","getBrace","TreeNode","left","right","count","_find","useStyles","makeStyles","theme","createStyles","width","backgroundColor","palette","background","paper","SelectedListItem","props","dispatch","index_in_tree","classes","React","useState","selectedIndex","setSelectedIndex","className","List","component","items","map","item","ind","ListItem","button","selected","onClick","event","console","log","Tree","setLeft","setRight","handleListItemClick","ListItemIcon","ListItemText","primary","DATA","MEASURES","FACTS","VARIABLES","FUNCTIONS","_keys","GlobalSearch","top","Box","position","TextField","label","style","margin","overflow","maxHeight","Divider","TextInput","showGlobal","setShowGlobal","showFunc","setShowFunc","error","setError","useEffect","lexer","lexAnalisys","rootNode","parseCode","e","message","display","height","flexDirection","alignItems","justifyContent","TextareaAutosize","outline","fontSize","padding","onChange","target","Alert","bottom","severity","Button","Wrapper","search","setSearch","filtered","setFiltered","prev","includes","list","fullList","btn","TemporaryDrawer","data","setState","toggleDrawer","anchor","open","key","Fragment","IconButton","Drawer","onClose","variant","Leaf","Typography","Func","cursor","borderLeft","borderRight","Node","VisualBuilder","traversTree","border","App","view","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","codeReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0a48da2.chunk.js","sourcesContent":["import TokenType from \"./TokenType\";\r\n\r\nexport default class Token {\r\n  type: TokenType;\r\n  text: string;\r\n  pos: number;\r\n\r\n  constructor(type: TokenType, text: string, pos: number) {\r\n    this.type = type;\r\n    this.text = text;\r\n    this.pos = pos;\r\n  }\r\n}\r\n","export default class TokenType {\r\n  name: string;\r\n  regexp: string;\r\n\r\n  constructor(name: string, regexp: string) {\r\n    this.name = name;\r\n    this.regexp = regexp;\r\n  }\r\n}\r\n\r\nexport const tokenTypesList = {\r\n  NUMBER: new TokenType(\"NUMBER\", \"[0-9]*\"),\r\n  VARIABLE: new TokenType(\"VARIABLE\", \"([a-z][0-9]?)*\"),\r\n  OPERAND: new TokenType(\"OPERAND\", \"\\\\[\\\\w*\\\\]\"),\r\n  FUNCTION: new TokenType(\"FUNCTION\", \"[A-Z]*\\\\(.*\\\\)\"),\r\n  SEMICOLON: new TokenType(\"SEMICOLON\", \";\"),\r\n  SPACE: new TokenType(\"SPACE\", \"[ \\\\n\\\\t\\\\r]\"),\r\n  ASSIGN: new TokenType(\"ASSIGN\", \"\\\\=\"),\r\n  RETURN: new TokenType(\"RETURN\", \"RETURN\"),\r\n  PLUS: new TokenType(\"PLUS\", \"\\\\+\"),\r\n  MINUS: new TokenType(\"MINUS\", \"\\\\-\"),\r\n  DIVIDE: new TokenType(\"DIVIDE\", \"\\\\/\"),\r\n  MULTIPLY: new TokenType(\"MULTIPLY\", \"\\\\*\"),\r\n  LPAR: new TokenType(\"LPAR\", \"\\\\(\"),\r\n  RPAR: new TokenType(\"RPAR\", \"\\\\)\"),\r\n};\r\n","import Token from \"./Token\";\r\nimport { tokenTypesList } from \"./TokenType\";\r\n\r\nexport default class Lexer {\r\n  code: string;\r\n  pos: number = 0;\r\n  tokenList: Token[] = [];\r\n\r\n  constructor(code: string) {\r\n    this.code = code;\r\n  }\r\n\r\n  lexAnalisys(): Token[] {\r\n    while (this.nextToken()) {}\r\n\r\n    this.tokenList = this.tokenList.filter(\r\n      (token) => token.type.name !== tokenTypesList.SPACE.name\r\n    );\r\n    return this.tokenList;\r\n  }\r\n\r\n  nextToken(): boolean {\r\n    if (this.pos >= this.code.length) return false;\r\n\r\n    const tokenTypeValues = Object.values(tokenTypesList);\r\n\r\n    for (let i = 0; i < tokenTypeValues.length; i++) {\r\n      const tokenType = tokenTypeValues[i];\r\n      const regexp = new RegExp(\"^\" + tokenType.regexp);\r\n      const result = this.code.substr(this.pos).match(regexp);\r\n      if (result && result[0]) {\r\n        const token = new Token(tokenType, result[0], this.pos);\r\n        this.pos += result[0].length;\r\n        this.tokenList.push(token);\r\n        return true;\r\n      }\r\n    }\r\n    throw new Error(`Нв позиции ${this.pos} обнаружена ошибка`);\r\n  }\r\n}\r\n","export default class ExpressionNode {}\r\n","import ExpressionNode from \"./ExpressionNode\";\r\n\r\nexport default class StatementsNode extends ExpressionNode {\r\n  codeStrings: ExpressionNode[] = [];\r\n\r\n  addNode(node: ExpressionNode) {\r\n    this.codeStrings.push(node);\r\n  }\r\n}\r\n","import Token from \"../Token\";\r\n\r\nexport default class NumberNode {\r\n  number: Token;\r\n\r\n  constructor(number: Token) {\r\n    this.number = number;\r\n  }\r\n}\r\n","import ExpressionNode from \"./ExpressionNode\";\r\nimport Token from \"../Token\";\r\n\r\nexport default class VariableNode extends ExpressionNode {\r\n  variable: Token;\r\n\r\n  constructor(variable: Token) {\r\n    super();\r\n    this.variable = variable;\r\n  }\r\n}\r\n","import ExpressionNode from \"./ExpressionNode\";\r\nimport Token from \"../Token\";\r\n\r\nexport default class OperandNode extends ExpressionNode {\r\n  operand: Token;\r\n\r\n  constructor(operand: Token) {\r\n    super();\r\n    this.operand = operand;\r\n  }\r\n}\r\n","import ExpressionNode from \"./ExpressionNode\";\r\nimport Token from \"../Token\";\r\n\r\nexport default class BinOperationNode extends ExpressionNode {\r\n  operator: Token;\r\n  leftNode: ExpressionNode;\r\n  rightNode: ExpressionNode;\r\n\r\n  constructor(\r\n    operator: Token,\r\n    leftNode: ExpressionNode,\r\n    rightNode: ExpressionNode\r\n  ) {\r\n    super();\r\n    this.operator = operator;\r\n    this.leftNode = leftNode;\r\n    this.rightNode = rightNode;\r\n  }\r\n}\r\n","import Token from \"../Token\";\r\nimport ExpressionNode from \"./ExpressionNode\";\r\n\r\nexport default class UnarOperationNode {\r\n  operator: Token;\r\n  operand: ExpressionNode;\r\n\r\n  constructor(operator: Token, operand: ExpressionNode) {\r\n    this.operator = operator;\r\n    this.operand = operand;\r\n  }\r\n}\r\n","import ExpressionNode from \"./ExpressionNode\";\r\nimport Token from \"../Token\";\r\n\r\nexport default class FunctionNode extends ExpressionNode {\r\n  function_: Token;\r\n\r\n  constructor(func: Token) {\r\n    super();\r\n    this.function_ = func;\r\n  }\r\n}\r\n","import Token from \"./Token\";\r\nimport TokenType, { tokenTypesList } from \"./TokenType\";\r\nimport ExpressionNode from \"./AST/ExpressionNode\";\r\nimport StatementsNode from \"./AST/StatementsNode\";\r\nimport NumberNode from \"./AST/NumberNode\";\r\nimport VariableNode from \"./AST/VariableNode\";\r\nimport OperandNode from \"./AST/OperandNode\";\r\nimport BinOperationNode from \"./AST/BinOperationNode\";\r\nimport UnarOperationNode from \"./AST/UnarOperationNode\";\r\nimport FunctionNode from \"./AST/FunctionNode\";\r\n\r\nexport default class Parser {\r\n  tokens: Token[];\r\n  pos: number = 0;\r\n  scope: any = {};\r\n\r\n  constructor(tokens: Token[]) {\r\n    this.tokens = tokens;\r\n  }\r\n\r\n  match(...expected: TokenType[]): Token | null {\r\n    if (this.pos < this.tokens.length) {\r\n      const currentToken = this.tokens[this.pos];\r\n      if (expected.find((type) => type.name === currentToken.type.name)) {\r\n        this.pos += 1;\r\n        return currentToken;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  require(...expected: TokenType[]): Token {\r\n    const token = this.match(...expected);\r\n    if (!token) {\r\n      throw new Error(`на позиции ${this.pos} ожидается ${expected[0].name}`);\r\n    }\r\n    return token;\r\n  }\r\n\r\n  parseVariableOrNumberOrOperand(): ExpressionNode {\r\n    const number = this.match(tokenTypesList.NUMBER);\r\n    if (number != null) {\r\n      return new NumberNode(number);\r\n    }\r\n    const variable = this.match(tokenTypesList.VARIABLE);\r\n    if (variable != null) {\r\n      return new VariableNode(variable);\r\n    }\r\n\r\n    const operand = this.match(tokenTypesList.OPERAND);\r\n    if (operand != null) {\r\n      return new OperandNode(operand);\r\n    }\r\n\r\n    const func = this.match(tokenTypesList.FUNCTION);\r\n    if (func != null) {\r\n      return new FunctionNode(func);\r\n    }\r\n\r\n    throw new Error(\r\n      `Ожидается (переменная/число/операнд) на ${this.pos} позиции`\r\n    );\r\n  }\r\n\r\n  parseReturn(): ExpressionNode {\r\n    const operatorReturn = this.match(tokenTypesList.RETURN);\r\n    if (operatorReturn != null) {\r\n      return new UnarOperationNode(operatorReturn, this.parseFormula());\r\n    }\r\n    throw new Error(`Ожидается унарный оператор RETURN на ${this.pos} позиции`);\r\n  }\r\n\r\n  parseParentheses(): ExpressionNode {\r\n    if (this.match(tokenTypesList.LPAR) != null) {\r\n      const node = this.parseFormula();\r\n      this.require(tokenTypesList.RPAR);\r\n      return node;\r\n    } else {\r\n      return this.parseVariableOrNumberOrOperand();\r\n    }\r\n  }\r\n\r\n  parseFormula(): ExpressionNode {\r\n    let leftNode = this.parseParentheses();\r\n    let operator = this.match(\r\n      tokenTypesList.MINUS,\r\n      tokenTypesList.PLUS,\r\n      tokenTypesList.DIVIDE,\r\n      tokenTypesList.MULTIPLY\r\n    );\r\n    while (operator != null) {\r\n      const rightNode = this.parseParentheses();\r\n      leftNode = new BinOperationNode(operator, leftNode, rightNode);\r\n      operator = this.match(\r\n        tokenTypesList.MINUS,\r\n        tokenTypesList.PLUS,\r\n        tokenTypesList.DIVIDE,\r\n        tokenTypesList.MULTIPLY\r\n      );\r\n    }\r\n    return leftNode;\r\n  }\r\n\r\n  parseExpression(): ExpressionNode {\r\n    if (this.match(tokenTypesList.VARIABLE) == null) {\r\n      const returnNode = this.parseReturn();\r\n      return returnNode;\r\n    }\r\n    this.pos -= 1;\r\n    let variableNode = this.parseVariableOrNumberOrOperand();\r\n    const assignOperator = this.match(tokenTypesList.ASSIGN);\r\n    if (assignOperator != null) {\r\n      const rightFormulaNode = this.parseFormula();\r\n      const binaryNode = new BinOperationNode(\r\n        assignOperator,\r\n        variableNode,\r\n        rightFormulaNode\r\n      );\r\n      return binaryNode;\r\n    }\r\n    throw new Error(\r\n      `После переменной ожидается оператор присвоения на позиции ${this.pos}`\r\n    );\r\n  }\r\n\r\n  parseCode(): ExpressionNode {\r\n    const root = new StatementsNode();\r\n    while (this.pos < this.tokens.length) {\r\n      const codeStringNode = this.parseExpression();\r\n      this.require(tokenTypesList.SEMICOLON);\r\n      root.addNode(codeStringNode);\r\n    }\r\n    return root;\r\n  }\r\n\r\n  //   run(node: ExpressionNode): any {\r\n  //     if (node instanceof NumberNode) {\r\n  //       return parseInt(node.number.text);\r\n  //     }\r\n  //     if (node instanceof UnarOperationNode) {\r\n  //       switch (node.operator.type.name) {\r\n  //         case tokenTypesList.LOG.name:\r\n  //           console.log(this.run(node.operand));\r\n  //           return;\r\n  //       }\r\n  //     }\r\n  //     if (node instanceof BinOperationNode) {\r\n  //       switch (node.operator.type.name) {\r\n  //         case tokenTypesList.PLUS.name:\r\n  //           return this.run(node.leftNode) + this.run(node.rightNode);\r\n  //         case tokenTypesList.MINUS.name:\r\n  //           return this.run(node.leftNode) - this.run(node.rightNode);\r\n  //         case tokenTypesList.ASSIGN.name:\r\n  //           const result = this.run(node.rightNode);\r\n  //           const variableNode = <VariableNode>node.leftNode;\r\n  //           this.scope[variableNode.variable.text] = result;\r\n  //           return result;\r\n  //       }\r\n  //     }\r\n  //     if (node instanceof VariableNode) {\r\n  //       if (this.scope[node.variable.text]) {\r\n  //         return this.scope[node.variable.text];\r\n  //       } else {\r\n  //         throw new Error(\r\n  //           `Переменная с названием ${node.variable.text} не обнаружена`\r\n  //         );\r\n  //       }\r\n  //     }\r\n  //     if (node instanceof StatementsNode) {\r\n  //       node.codeStrings.forEach((codeString) => {\r\n  //         this.run(codeString);\r\n  //       });\r\n  //       return;\r\n  //     }\r\n  //     throw new Error(\"Ошибка!\");\r\n  //   }\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store/store\";\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport type { RootState } from \"./store\";\r\n\r\ninterface CodeSlice {\r\n  value: string;\r\n  index: number;\r\n  brace: boolean;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: CodeSlice = {\r\n  value: \"\",\r\n  index: 0,\r\n  brace: false,\r\n};\r\n\r\nexport const codeSlice = createSlice({\r\n  name: \"code\",\r\n  initialState,\r\n  reducers: {\r\n    setCode: (state, action: PayloadAction<string>) => {\r\n      state.value = action.payload;\r\n    },\r\n    setCurrentIndex: (state, action: PayloadAction<number>) => {\r\n      state.index = action.payload;\r\n    },\r\n    toggleBrace: (state) => {\r\n      state.brace = !state.brace;\r\n    },\r\n    // incrementByAmount: (state, action: PayloadAction<number>) => {\r\n    //   state.value += action.payload;\r\n    // },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { setCode, setCurrentIndex, toggleBrace } = codeSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const getCode = (state: RootState) => state.code.value;\r\n\r\nexport const getCurrentIndex = (state: RootState) => state.code.index;\r\n\r\nexport const getBrace = (state: RootState) => state.code.brace;\r\n\r\nexport default codeSlice.reducer;\r\n","export class TreeNode {\r\n  type: \"OPERATOR\" | \"OPERAND\" | \"FUNCTION\";\r\n  index: number;\r\n  value: string | null;\r\n  left: TreeNode | null;\r\n  right: TreeNode | null;\r\n  static count: number = 0;\r\n\r\n  constructor(index: number = 0) {\r\n    this.index = index;\r\n    this.type = \"OPERAND\";\r\n    this.value = null;\r\n    this.left = null;\r\n    this.right = null;\r\n  }\r\n\r\n  setValue(value: string) {\r\n    this.value = value;\r\n  }\r\n\r\n  setLeft() {\r\n    TreeNode.count++;\r\n    this.left = new TreeNode(TreeNode.count);\r\n  }\r\n\r\n  setRight() {\r\n    TreeNode.count++;\r\n    this.right = new TreeNode(TreeNode.count);\r\n  }\r\n}\r\nclass Tree {\r\n  root: TreeNode = new TreeNode();\r\n\r\n  find(index: number) {\r\n    if (this.root.index === index) {\r\n      return this.root;\r\n    } else\r\n      return (\r\n        this._find(this.root.left, index) || this._find(this.root.right, index)\r\n      );\r\n  }\r\n\r\n  _find(node: TreeNode | null, index: number): any {\r\n    if (node) {\r\n      if (node.index === index) return node;\r\n      else return this._find(node.left, index) || this._find(node.right, index);\r\n    } else return null;\r\n  }\r\n}\r\n\r\nexport default new Tree();\r\n","import React from \"react\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport InboxIcon from \"@material-ui/icons/Inbox\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { setCode, getCode, getCurrentIndex } from \"../../store/codeSlice\";\r\nimport Tree from \"../../Tree\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n  })\r\n);\r\n\r\nexport default function SelectedListItem(props: any) {\r\n  const dispatch = useAppDispatch();\r\n  const code = useAppSelector(getCode);\r\n  const index_in_tree = useAppSelector(getCurrentIndex);\r\n  const classes = useStyles();\r\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n  const handleListItemClick = (\r\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n    index: number,\r\n    value: string\r\n  ) => {\r\n    console.log(props.type);\r\n    setSelectedIndex(index);\r\n    dispatch(setCode(value));\r\n    const node = Tree.find(index_in_tree);\r\n    if (node) {\r\n      node.value = value;\r\n      node.type = props.type === \"Функции\" ? \"FUNCTION\" : \"OPERAND\";\r\n      //Функции\r\n      if (props.type === \"Функции\") {\r\n        node.setLeft();\r\n        node.setRight();\r\n      }\r\n    }\r\n\r\n    // if (props.type === \"Функции\") dispatch(setCode(code + `${value}(`));\r\n    // else dispatch(setCode(code + `[${value}] `));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <List component=\"nav\">\r\n        {props.items.map((item: string, ind: number) => (\r\n          <ListItem\r\n            key={ind}\r\n            button\r\n            selected={selectedIndex === ind}\r\n            onClick={(event) => handleListItemClick(event, ind, item)}\r\n          >\r\n            <ListItemIcon>\r\n              <InboxIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary={item} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n}\r\n","export const DATA = {\r\n  MEASURES: [\r\n    \"MEASURE_1\",\r\n    \"MEASURE_2\",\r\n    \"MEASURE_3\",\r\n    \"MEASURE_4\",\r\n    \"MEASURE_5\",\r\n    \"MEASURE_6\",\r\n    \"MEASURE_7\",\r\n    \"MEASURE_8\",\r\n    \"MEASURE_9\",\r\n    \"MEASURE_10\",\r\n  ],\r\n  FACTS: [\r\n    \"FACT_1\",\r\n    \"FACT_2\",\r\n    \"FACT_3\",\r\n    \"FACT_4\",\r\n    \"FACT_5\",\r\n    \"FACT_6\",\r\n    \"FACT_7\",\r\n    \"FACT_8\",\r\n    \"FACT_9\",\r\n    \"FACT_10\",\r\n  ],\r\n  VARIABLES: [\r\n    \"DISTANCE\",\r\n    \"LENGHT\",\r\n    \"HEIGHT\",\r\n    \"WEIGHT\",\r\n    \"LATITUDE\",\r\n    \"REPLICAS\",\r\n    \"CENTROID\",\r\n    \"BLOB\",\r\n    \"MAX_VAL\",\r\n    \"MIN_VAL\",\r\n    \"PI\",\r\n  ],\r\n  FUNCTIONS: [\"SUM\", \"MIN\", \"MAX\", \"SQRT\", \"POW\", \"FUNC\", \"MINMAX\", \"ROUND\"],\r\n};\r\n","import TextField from \"@material-ui/core/TextField\";\r\nimport React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport List from \"../List\";\r\nimport { DATA } from \"../../data\";\r\nimport { Divider } from \"@material-ui/core\";\r\n\r\nconst _keys = [\"FACTS\", \"MEASURES\", \"VARIABLES\"];\r\n\r\ntype SOME_KEYS = \"FACTS\" | \"MEASURES\" | \"VARIABLES\";\r\n\r\nexport const GlobalSearch: React.FC<{\r\n  func?: boolean;\r\n  pos: string;\r\n  left: string;\r\n  top: string;\r\n}> = ({ func, pos, left, top }) => {\r\n  return (\r\n    <Box width=\"270px\" position={pos} left={left} top={top}>\r\n      <TextField label={\"Поиск\"} style={{ width: \"90%\", margin: 10 }} />\r\n      <Box overflow=\"auto\" maxHeight=\"300px\">\r\n        {func ? (\r\n          <List items={DATA[\"FUNCTIONS\"]} />\r\n        ) : (\r\n          _keys.map((item: any) => (\r\n            <>\r\n              <List items={DATA[item as SOME_KEYS]} />\r\n              <Divider />\r\n            </>\r\n          ))\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { DATA } from \"../../data\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\nimport { TemporaryDrawer } from \"../Drawer\";\r\nimport { useEffect } from \"react\";\r\nimport Lexer from \"../../Lexer\";\r\nimport Parser from \"../../Parser\";\r\nimport { GlobalSearch } from \"../GlobalSearch\";\r\nimport { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { getCode, setCode } from \"../../store/codeSlice\";\r\n\r\nexport const TextInput = () => {\r\n  const value = useAppSelector(getCode);\r\n  const dispatch = useAppDispatch();\r\n  //   const [value, setValue] = useState(\"\");\r\n  const [showGlobal, setShowGlobal] = useState(false);\r\n  const [showFunc, setShowFunc] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const handleChange = (e: any) => {\r\n    dispatch(setCode(e.target.value));\r\n    // setValue(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const lexer = new Lexer(value);\r\n      lexer.lexAnalisys();\r\n      console.log(lexer.tokenList);\r\n      const parser = new Parser(lexer.tokenList);\r\n      const rootNode = parser.parseCode();\r\n      console.log(rootNode);\r\n      setError(\"\");\r\n    } catch (e) {\r\n      console.log(e.message);\r\n      setError(e.message);\r\n    }\r\n  }, [value]);\r\n  return (\r\n    <Box\r\n      width=\"100%\"\r\n      display=\"flex\"\r\n      height=\"600px\"\r\n      flexDirection=\"column\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n    >\r\n      {showFunc && <GlobalSearch func pos=\"absolute\" left=\"50px\" top=\"50px\" />}\r\n      {showGlobal && <GlobalSearch pos=\"absolute\" left=\"50px\" top=\"450px\" />}\r\n      <Box\r\n        width=\"60%\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        position=\"relative\"\r\n      >\r\n        <TextareaAutosize\r\n          style={{\r\n            outline: \"none\",\r\n            width: \"100%\",\r\n            height: \"300px\",\r\n            fontSize: 20,\r\n            padding: 20,\r\n          }}\r\n          value={value}\r\n          onChange={handleChange}\r\n        />\r\n        {error && (\r\n          <Alert\r\n            style={{ position: \"absolute\", bottom: 0, width: \"101%\" }}\r\n            severity=\"error\"\r\n          >\r\n            {error}\r\n          </Alert>\r\n        )}\r\n      </Box>\r\n      <Box display=\"flex\">\r\n        {/* <TemporaryDrawer data={DATA} /> */}\r\n        <Button onClick={() => setShowFunc(!showFunc)}>Func Search</Button>\r\n        <Button onClick={() => setShowGlobal(!showGlobal)}>\r\n          Global Search\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import TextField from \"@material-ui/core/TextField\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport List from \"../List\";\r\n\r\nexport const Wrapper: React.FC<{ items: string[]; type: string }> = ({\r\n  items,\r\n  type,\r\n}) => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [filtered, setFiltered] = useState(items);\r\n  useEffect(() => {\r\n    setFiltered((prev) => items.filter((item) => item.includes(search)));\r\n  }, [search]);\r\n\r\n  return (\r\n    <Box width=\"100%\" overflow=\"hidden\">\r\n      <TextField\r\n        label={type}\r\n        style={{ width: \"90%\", margin: 10 }}\r\n        value={search}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n      />\r\n      <Box maxHeight=\"300px\" overflow=\"auto\" width=\"100%\">\r\n        <List items={filtered} type={type} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { Wrapper } from \"../Wrapper\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport {\r\n  getCode,\r\n  setCode,\r\n  setCurrentIndex,\r\n  getCurrentIndex,\r\n  toggleBrace,\r\n} from \"../../store/codeSlice\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tree from \"../../Tree\";\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: \"auto\",\r\n  },\r\n  btn: {\r\n    margin: 10,\r\n  },\r\n});\r\n\r\ntype Anchor = \"top\" | \"left\" | \"bottom\" | \"right\";\r\n\r\nexport const TemporaryDrawer: React.FC<{ data: any; index: number }> = ({\r\n  data,\r\n  index,\r\n}) => {\r\n  const dispatch = useAppDispatch();\r\n  const value = useAppSelector(getCode);\r\n  const index_in_tree = useAppSelector(getCurrentIndex);\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    top: false,\r\n    left: false,\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n\r\n  const toggleDrawer =\r\n    (anchor: Anchor, open: boolean) =>\r\n    (event: React.KeyboardEvent | React.MouseEvent) => {\r\n      if (\r\n        event.type === \"keydown\" &&\r\n        ((event as React.KeyboardEvent).key === \"Tab\" ||\r\n          (event as React.KeyboardEvent).key === \"Shift\")\r\n      ) {\r\n        return;\r\n      }\r\n      dispatch(setCurrentIndex(index));\r\n      setState({ ...state, [anchor]: open });\r\n    };\r\n\r\n  const list = (anchor: Anchor) => (\r\n    <Box display=\"flex\">\r\n      <Wrapper items={data[\"FUNCTIONS\"]} type=\"Функции\" />\r\n      <Wrapper items={data[\"FACTS\"]} type=\"Факты\" />\r\n      <Wrapper items={data[\"MEASURES\"]} type=\"Меры\" />\r\n      <Wrapper items={data[\"VARIABLES\"]} type=\"Переменные\" />\r\n    </Box>\r\n  );\r\n\r\n  const custom_btns = () => (\r\n    <Box display=\"flex\" justifyContent=\"center\">\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"+\"));\r\n          const node = Tree.find(index_in_tree);\r\n          if (node) {\r\n            node.value = \"+\";\r\n            node.type = \"OPERATOR\";\r\n            node.setLeft();\r\n            node.setRight();\r\n          }\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        +\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"-\"));\r\n          const node = Tree.find(index_in_tree);\r\n          if (node) {\r\n            node.value = \"-\";\r\n            node.type = \"OPERATOR\";\r\n            node.setLeft();\r\n            node.setRight();\r\n          }\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        -\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"*\"));\r\n          const node = Tree.find(index_in_tree);\r\n          if (node) {\r\n            node.value = \"*\";\r\n            node.type = \"OPERATOR\";\r\n            node.setLeft();\r\n            node.setRight();\r\n          }\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        *\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"/\"));\r\n          const node = Tree.find(index_in_tree);\r\n          if (node) {\r\n            node.value = \"/\";\r\n            node.type = \"OPERATOR\";\r\n            node.setLeft();\r\n            node.setRight();\r\n          }\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        /\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"OR\"));\r\n          const node = Tree.find(index_in_tree);\r\n          if (node) {\r\n            node.value = \"OR\";\r\n            node.type = \"OPERATOR\";\r\n            node.setLeft();\r\n            node.setRight();\r\n          }\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        OR\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"XOR\"));\r\n          const node = Tree.find(index_in_tree);\r\n          if (node) {\r\n            node.value = \"XOR\";\r\n            node.type = \"FUNCTION\";\r\n            node.setLeft();\r\n          }\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        XOR\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"AND\"));\r\n          const node = Tree.find(index_in_tree);\r\n          if (node) {\r\n            node.value = \"AND\";\r\n            node.type = \"OPERATOR\";\r\n            node.setLeft();\r\n            node.setRight();\r\n          }\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        AND\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"NOT\"));\r\n          const node = Tree.find(index_in_tree);\r\n          if (node) {\r\n            node.value = \"NOT\";\r\n            node.type = \"FUNCTION\";\r\n            node.setLeft();\r\n          }\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        NOT\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"ROUND\"));\r\n          const node = Tree.find(index_in_tree);\r\n          if (node) {\r\n            node.value = \"ROUND\";\r\n            node.type = \"FUNCTION\";\r\n            node.setLeft();\r\n          }\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        ROUND\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(setCode(\"SQRT\"));\r\n          const node = Tree.find(index_in_tree);\r\n          if (node) {\r\n            node.value = \"SQRT\";\r\n            node.type = \"FUNCTION\";\r\n            node.setLeft();\r\n          }\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        SQRT\r\n      </Button>\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={() => {\r\n          dispatch(toggleBrace());\r\n        }}\r\n        variant=\"outlined\"\r\n      >\r\n        ()\r\n      </Button>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {([\"bottom\"] as Anchor[]).map((anchor) => (\r\n        <React.Fragment key={anchor}>\r\n          <IconButton onClick={toggleDrawer(anchor, true)}>\r\n            <AddIcon />\r\n          </IconButton>\r\n          <Drawer\r\n            anchor={anchor}\r\n            open={state[anchor]}\r\n            onClose={toggleDrawer(anchor, false)}\r\n          >\r\n            {custom_btns()}\r\n            {list(anchor)}\r\n          </Drawer>\r\n        </React.Fragment>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { TemporaryDrawer } from \"../Drawer\";\r\nimport { DATA } from \"../../data\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\ntype Props = {\r\n  value?: string | null;\r\n  index?: number;\r\n};\r\n\r\nexport const Leaf: React.FC<Props> = ({ value = null, index }) => {\r\n  return value ? (\r\n    <Typography>{value}</Typography>\r\n  ) : (\r\n    <TemporaryDrawer data={DATA} index={index || 0} />\r\n  );\r\n};\r\n","import { Box } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Leaf } from \"../Leaf\";\r\nimport { Node } from \"../Node\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport { useAppSelector } from \"../../hooks\";\r\nimport { getBrace } from \"../../store/codeSlice\";\r\nimport { useState } from \"react\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n};\r\n\r\nexport const Func: React.FC<Props> = ({ node }) => {\r\n  const brace = useAppSelector(getBrace);\r\n\r\n  const [state, setState] = useState(false);\r\n\r\n  const handleClick = () => setState(!state);\r\n\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Typography style={{ margin: 5, fontSize: 25 }}>{node.value}</Typography>\r\n      {!state && <Typography style={{ margin: 5, fontSize: 25 }}>(</Typography>}\r\n      <Box\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        flexDirection={state ? \"column\" : \"row\"}\r\n        style={{\r\n          cursor: \"pointer\",\r\n          borderLeft: state ? \"2px solid black\" : \"none\",\r\n          borderRight: state ? \"2px solid black\" : \"none\",\r\n          margin: 5,\r\n          padding: 5,\r\n        }}\r\n      >\r\n        {node.left && node.left.type !== \"OPERAND\" ? (\r\n          node.left.type === \"FUNCTION\" ? (\r\n            <Func node={node.left} />\r\n          ) : (\r\n            <Node node={node.left} />\r\n          )\r\n        ) : (\r\n          <Leaf\r\n            value={node.left ? node.left.value : null}\r\n            index={node.left ? node.left.index : 0}\r\n          />\r\n        )}\r\n        {node.right && (\r\n          <Typography\r\n            style={{ padding: 15, fontSize: 25 }}\r\n            onClick={handleClick}\r\n          >\r\n            ,\r\n          </Typography>\r\n        )}\r\n        {node.right &&\r\n          (node.right.type !== \"OPERAND\" ? (\r\n            node.right.type === \"FUNCTION\" ? (\r\n              <Func node={node.right} />\r\n            ) : (\r\n              <Node node={node.right} />\r\n            )\r\n          ) : (\r\n            <Leaf\r\n              value={node.right ? node.right.value : null}\r\n              index={node.right ? node.right.index : 0}\r\n            />\r\n          ))}\r\n      </Box>\r\n      {!state && <Typography style={{ margin: 5, fontSize: 25 }}>)</Typography>}\r\n    </Box>\r\n  );\r\n};\r\n","import { Box } from \"@material-ui/core\";\r\nimport { Leaf } from \"../Leaf\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useState } from \"react\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport { useAppSelector } from \"../../hooks\";\r\nimport { getBrace } from \"../../store/codeSlice\";\r\nimport { Func } from \"../Func\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n};\r\n\r\nexport const Node: React.FC<Props> = ({ node }) => {\r\n  const brace = useAppSelector(getBrace);\r\n\r\n  const [state, setState] = useState(false);\r\n\r\n  const handleClick = () => setState(!state);\r\n\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      alignItems=\"center\"\r\n      flexDirection={state ? \"column\" : \"row\"}\r\n      style={{\r\n        cursor: \"pointer\",\r\n        borderLeft: brace ? \"2px solid black\" : \"none\",\r\n        borderRight: brace ? \"2px solid black\" : \"none\",\r\n        margin: 5,\r\n        padding: 5,\r\n      }}\r\n    >\r\n      {node.left && node.left.type !== \"OPERAND\" ? (\r\n        node.left.type === \"FUNCTION\" ? (\r\n          <Func node={node.left} />\r\n        ) : (\r\n          <Node node={node.left} />\r\n        )\r\n      ) : (\r\n        <Leaf\r\n          value={node.left ? node.left.value : null}\r\n          index={node.left ? node.left.index : 0}\r\n        />\r\n      )}\r\n      <Typography\r\n        variant=\"button\"\r\n        onClick={handleClick}\r\n        style={{ margin: 15, fontSize: 25 }}\r\n      >\r\n        {node.value}\r\n      </Typography>\r\n      {node.right && node.right.type !== \"OPERAND\" ? (\r\n        node.right.type === \"FUNCTION\" ? (\r\n          <Func node={node.right} />\r\n        ) : (\r\n          <Node node={node.right} />\r\n        )\r\n      ) : (\r\n        <Leaf\r\n          value={node.right ? node.right.value : null}\r\n          index={node.right ? node.right.index : 0}\r\n        />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","import Box from \"@material-ui/core/Box\";\r\nimport { Leaf } from \"../Leaf\";\r\nimport { Node } from \"../Node\";\r\nimport { Func } from \"../Func\";\r\nimport Tree, { TreeNode } from \"../../Tree\";\r\nimport { useEffect } from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { setCurrentIndex, getCode } from \"../../store/codeSlice\";\r\n\r\nexport const VisualBuilder = () => {\r\n  const dispatch = useAppDispatch();\r\n  const code = useAppSelector(getCode);\r\n\r\n  useEffect(() => {\r\n    traversTree(Tree.root);\r\n    // console.log(Tree);\r\n  }, [Tree, code]);\r\n\r\n  const traversTree = (node: TreeNode) => {\r\n    if (node.type === \"OPERAND\")\r\n      return <Leaf value={node.value} index={node.index} />;\r\n    else if (node.type === \"FUNCTION\") return <Func node={node} />;\r\n    else return <Node node={node} />;\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      width=\"1000px\"\r\n      height=\"700px\"\r\n      border=\"1px solid black\"\r\n      margin=\"auto\"\r\n      overflow=\"auto\"\r\n      display=\"flex\"\r\n    >\r\n      <Box margin=\"auto\">{traversTree(Tree.root)}</Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { TextInput } from \"../TextInput\";\r\nimport { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { VisualBuilder } from \"../VisualBuilder\";\r\n\r\nexport const App = () => {\r\n  const [view, setView] = useState(false);\r\n\r\n  const handleClick = () => false;\r\n  return (\r\n    <>\r\n      <Button onClick={handleClick}>{view ? \"Text\" : \"Visual\"}</Button>\r\n      {view ? <TextInput /> : <VisualBuilder />}\r\n    </>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport codeReducer from \"./codeSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    code: codeReducer,\r\n  },\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}