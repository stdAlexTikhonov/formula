{"version":3,"sources":["hooks.ts","store/codeSlice.ts","components/Node/styles.ts","Tree.ts","components/UserInput/index.tsx","components/List/styles.ts","components/List/index.tsx","components/Wrapper/mapping.ts","components/Wrapper/styles.ts","components/Wrapper/index.tsx","components/CustomButtons/styles.ts","components/CustomIcon/styles.ts","components/CustomIcon/index.tsx","components/CustomButtons/index.tsx","components/Trigger/index.tsx","components/CustomPopover/index.tsx","components/Drawer/index.tsx","components/Leaf/index.tsx","components/Func/styles.ts","components/Func/ComponentSelector.tsx","components/Func/index.tsx","components/Args/styles.ts","components/Args/index.tsx","components/Node/ComponentSelector.tsx","components/Node/index.tsx","components/VisualBuilder/styles.ts","components/VisualBuilder/Settings.tsx","components/VisualBuilder/index.tsx","data/index.ts","components/TextInput/styles.ts","components/TextInput/index.tsx","components/App/index.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","codeSlice","createSlice","name","initialState","value","index","brace","update_tree","data","drawer","text","reducers","setCode","state","action","payload","setData","setCurrentIndex","toggleBrace","updateTree","toggleDrawer","toggleText","actions","getCode","code","getCurrentIndex","getBrace","getUpdateTree","getData","getDrawer","getText","useStyles","makeStyles","box","display","alignItems","flexDirection","cursor","borderLeft","borderRight","margin","padding","position","borderRadius","mid","fontSize","btn","top","right","icon","TreeNode","node_type","left","args","arbitrary_args","user_input","expected_type","type","type_error","this","arguments_types","i","quantity","length","count","node","push","addArguments","root","_find","_delete","find","child","start","traversal","print","toUpperCase","UserInput","setNode","onClose","dispatch","Tree","React","useState","setValue","Box","maxWidth","TextField","autoFocus","style","alignSelf","flexGrow","placeholder","onChange","e","isNaN","parseInt","target","Button","onClick","checkType","theme","createStyles","width","backgroundColor","palette","background","paper","mapping_","n","s","b","d","CustomList","items","index_in_tree","classes","selectedIndex","setSelectedIndex","className","List","component","map","item","ind","ListItem","button","selected","event","is_operator","setLeft","setArgs","return_type","handleListItemClick","Typography","variant","fontStyle","paddingRight","ListItemText","primary","join","mapping_list_types","Map","set","marginTop","wrapper","overflow","maxHeight","Wrapper","search","setSearch","filtered","setFiltered","useEffect","filter","includes","label","get","list","fullList","mathIcon","fontFamily","eq","content","ne","gt","gte","lt","lte","plus","mult","or","minus","in","braces","union","divide","CustomIcon","cn","getIcon","CustomButtons","operators","justifyContent","flexWrap","operator","setRight","size","color","parseFloat","toString","Trigger","show_delete","setShowDelete","disableRipple","onMouseEnter","onMouseLeave","IconButton","preventDefault","stopPropagation","delete","new_node","swap_with_left","swap_with_right","CustomPopover","anchorEl","setAnchorEl","show","setShow","setType","open","setOpen","handleClose","_type","id","undefined","currentTarget","Popover","anchorOrigin","vertical","horizontal","transformOrigin","ListItemIcon","minWidth","height","bgcolor","marginLeft","getComponent","CustomDrawer","setState","key","Drawer","anchor","Leaf","typography","ComponentSelector","Func","handleClick","arg","Args","Node","setVisible","inner_box","Settings","VisualBuilder","traversTree","Paper","elevation","DATA","VARIABLES","OPERATORS","FUNCTIONS","divider","iconButton","input","spacing","flex","TextInput","InputBase","inputProps","Divider","orientation","aria-label","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","codeReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f7ce464.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store/store\";\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport type { RootState } from \"./store\";\r\n\r\ntype Item = {\r\n  name: string;\r\n  arguments_types?: string[];\r\n  return_type?: string;\r\n  type?: string;\r\n  is_operator?: boolean;\r\n  arbitrary_args?: boolean;\r\n};\r\n\r\ninterface CodeSlice {\r\n  value: string;\r\n  index: number;\r\n  brace: boolean;\r\n  update_tree: boolean;\r\n  data: {\r\n    [key: string]: Item[];\r\n  };\r\n  drawer: boolean;\r\n  text: boolean;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: CodeSlice = {\r\n  value: \"\",\r\n  index: 0,\r\n  brace: false,\r\n  update_tree: false,\r\n  data: {},\r\n  drawer: false,\r\n  text: false,\r\n};\r\n\r\nexport const codeSlice = createSlice({\r\n  name: \"code\",\r\n  initialState,\r\n  reducers: {\r\n    setCode: (state, action: PayloadAction<string>) => {\r\n      state.value = action.payload;\r\n    },\r\n    setData: (state, action: PayloadAction<any>) => {\r\n      state.data = action.payload;\r\n    },\r\n    setCurrentIndex: (state, action: PayloadAction<number>) => {\r\n      state.index = action.payload;\r\n    },\r\n    toggleBrace: (state) => {\r\n      state.brace = !state.brace;\r\n    },\r\n    updateTree: (state) => {\r\n      state.update_tree = !state.update_tree;\r\n    },\r\n    toggleDrawer: (state) => {\r\n      state.drawer = !state.drawer;\r\n    },\r\n    toggleText: (state) => {\r\n      state.text = !state.text;\r\n    },\r\n    // incrementByAmount: (state, action: PayloadAction<number>) => {\r\n    //   state.value += action.payload;\r\n    // },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const {\r\n  setCode,\r\n  setCurrentIndex,\r\n  toggleBrace,\r\n  updateTree,\r\n  setData,\r\n  toggleDrawer,\r\n  toggleText,\r\n} = codeSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const getCode = (state: RootState) => state.code.value;\r\n\r\nexport const getCurrentIndex = (state: RootState) => state.code.index;\r\n\r\nexport const getBrace = (state: RootState) => state.code.brace;\r\n\r\nexport const getUpdateTree = (state: RootState) => state.code.update_tree;\r\n\r\nexport const getData = (state: RootState) => state.code.data;\r\n\r\nexport const getDrawer = (state: RootState) => state.code.drawer;\r\n\r\nexport const getText = (state: RootState) => state.code.text;\r\n\r\nexport default codeSlice.reducer;\r\n","import { makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles<Theme, { state: boolean; brace: boolean }>({\r\n  box: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    flexDirection: ({ state }) => (state ? \"column\" : \"row\"),\r\n    cursor: \"pointer\",\r\n    borderLeft: ({ brace }) => (brace ? \"2px solid black\" : \"none\"),\r\n    borderRight: ({ brace }) => (brace ? \"2px solid black\" : \"none\"),\r\n    margin: 5,\r\n    padding: 5,\r\n    position: \"relative\",\r\n    borderRadius: 10,\r\n  },\r\n  mid: {\r\n    margin: 15,\r\n    fontSize: 25,\r\n  },\r\n  btn: {\r\n    position: \"absolute\",\r\n    top: -18,\r\n    right: -12,\r\n  },\r\n  icon: {\r\n    fontSize: 15,\r\n  },\r\n});\r\n","export class TreeNode {\r\n  node_type: string;\r\n  index: number;\r\n  value: string;\r\n  left: TreeNode | null;\r\n  right: TreeNode | null;\r\n  args: TreeNode[];\r\n  arbitrary_args: boolean;\r\n  user_input: boolean;\r\n  expected_type: string;\r\n  type: string;\r\n  type_error: boolean;\r\n  static count: number = 0;\r\n\r\n  constructor(index: number = 0, node_type: string = \"OPERAND\") {\r\n    this.index = index;\r\n    this.node_type = node_type;\r\n    this.value = \"\";\r\n    this.left = null;\r\n    this.right = null;\r\n    this.args = [];\r\n    this.user_input = false;\r\n    this.arbitrary_args = false;\r\n    this.expected_type = \"any\";\r\n    this.type = \"any\";\r\n    this.type_error = false;\r\n  }\r\n\r\n  setValue(value: string) {\r\n    this.value = value;\r\n  }\r\n\r\n  addArguments(arguments_types?: string[]) {\r\n    let i = 0;\r\n    const quantity = arguments_types ? arguments_types.length : 1;\r\n    while (i < quantity) {\r\n      TreeNode.count++;\r\n      const node = new TreeNode(TreeNode.count);\r\n      node.expected_type = arguments_types\r\n        ? arguments_types[i]\r\n        : this.args[0].type;\r\n      this.args.push(node);\r\n      i++;\r\n    }\r\n  }\r\n\r\n  setLeft(expected_type: string) {\r\n    TreeNode.count++;\r\n    this.left = new TreeNode(TreeNode.count);\r\n    this.left.expected_type = expected_type;\r\n  }\r\n\r\n  setRight(expected_type: string) {\r\n    TreeNode.count++;\r\n    this.right = new TreeNode(TreeNode.count);\r\n    this.right.expected_type = expected_type;\r\n  }\r\n\r\n  setArgs(arbitrary_args: boolean, arguments_types: string[]) {\r\n    TreeNode.count++;\r\n    this.right = new TreeNode(TreeNode.count, \"ARGS\");\r\n    this.right.arbitrary_args = arbitrary_args;\r\n    if (arguments_types) this.right.addArguments(arguments_types);\r\n  }\r\n\r\n  checkType() {\r\n    this.type_error =\r\n      this.expected_type !== \"any\" && this.expected_type !== this.type;\r\n  }\r\n}\r\nclass Tree {\r\n  root: TreeNode = new TreeNode();\r\n\r\n  find(index: number) {\r\n    if (this.root.index === index) {\r\n      return this.root;\r\n    } else if (\r\n      this.root.node_type === \"OPERAND\" ||\r\n      this.root.node_type === \"OPERATOR\"\r\n    )\r\n      return (\r\n        this._find(this.root.left, index) || this._find(this.root.right, index)\r\n      );\r\n    else if (this.root.node_type === \"FUNCTION\")\r\n      return (\r\n        this._find(this.root.args[0], index) ||\r\n        this._find(this.root.args[1], index) ||\r\n        this._find(this.root.args[2], index) ||\r\n        this._find(this.root.args[3], index) ||\r\n        this._find(this.root.args[4], index) ||\r\n        this._find(this.root.args[5], index) ||\r\n        this._find(this.root.args[6], index) ||\r\n        this._find(this.root.args[7], index) ||\r\n        this._find(this.root.args[8], index) ||\r\n        this._find(this.root.args[9], index)\r\n      );\r\n    else return null;\r\n  }\r\n\r\n  _find(node: TreeNode | null, index: number): any {\r\n    if (node) {\r\n      if (node.index === index) return node;\r\n      else if (node.node_type === \"OPERAND\" || node.node_type === \"OPERATOR\")\r\n        return this._find(node.left, index) || this._find(node.right, index);\r\n      else if (node.node_type === \"FUNCTION\" || node.node_type === \"ARGS\")\r\n        return (\r\n          this._find(node.args[0], index) ||\r\n          this._find(node.args[1], index) ||\r\n          this._find(node.args[2], index) ||\r\n          this._find(node.args[3], index) ||\r\n          this._find(node.args[4], index) ||\r\n          this._find(node.args[5], index) ||\r\n          this._find(node.args[6], index) ||\r\n          this._find(node.args[7], index) ||\r\n          this._find(node.args[8], index) ||\r\n          this._find(node.args[9], index)\r\n        );\r\n      else return null;\r\n    }\r\n  }\r\n\r\n  delete(index: number) {\r\n    if (this.root.index === index) this.root = new TreeNode();\r\n    else if (this.root.left && this.root.left.index === index)\r\n      this.root.left = new TreeNode(this.root.left.index);\r\n    else if (this.root.right && this.root.right.index === index)\r\n      this.root.right = new TreeNode(this.root.right.index);\r\n    else if (this.root.node_type === \"FUNCTION\") {\r\n      for (let i = 0; i < this.root.args.length; i++) {\r\n        if (this.root.args[i].index === index)\r\n          this.root.args[i] = new TreeNode(this.root.args[i].index);\r\n      }\r\n      return (\r\n        this._delete(this.root.args[0], index) ||\r\n        this._delete(this.root.args[1], index) ||\r\n        this._delete(this.root.args[2], index) ||\r\n        this._delete(this.root.args[3], index) ||\r\n        this._delete(this.root.args[4], index) ||\r\n        this._delete(this.root.args[5], index) ||\r\n        this._delete(this.root.args[6], index) ||\r\n        this._delete(this.root.args[7], index) ||\r\n        this._delete(this.root.args[8], index) ||\r\n        this._delete(this.root.args[9], index)\r\n      );\r\n    } else\r\n      return (\r\n        this._delete(this.root.left, index) ||\r\n        this._delete(this.root.right, index)\r\n      );\r\n  }\r\n\r\n  _delete(node: TreeNode | null, index: number): any {\r\n    if (node) {\r\n      if (node.index === index) node = new TreeNode(node.index);\r\n      else if (node.left && node.left.index === index)\r\n        node.left = new TreeNode(node.left.index);\r\n      else if (node.right && node.right.index === index)\r\n        node.right = new TreeNode(node.right.index);\r\n      else if (node.node_type === \"FUNCTION\" || node.node_type === \"ARGS\") {\r\n        for (let i = 0; i < node.args.length; i++) {\r\n          if (node.args[i].index === index)\r\n            node.args[i] = new TreeNode(node.args[i].index);\r\n        }\r\n        return (\r\n          this._delete(node.args[0], index) ||\r\n          this._delete(node.args[1], index) ||\r\n          this._delete(node.args[2], index) ||\r\n          this._delete(node.args[3], index) ||\r\n          this._delete(node.args[4], index) ||\r\n          this._delete(node.args[5], index) ||\r\n          this._delete(node.args[6], index) ||\r\n          this._delete(node.args[7], index) ||\r\n          this._delete(node.args[8], index) ||\r\n          this._delete(node.args[9], index)\r\n        );\r\n      } else\r\n        return (\r\n          this._delete(node.left, index) || this._delete(node.right, index)\r\n        );\r\n    }\r\n  }\r\n\r\n  swap_with_left(index: number) {\r\n    const node = this.find(index);\r\n    const child = node.left;\r\n    if (node) {\r\n      if (\r\n        node.node_type !== \"OPERATOR\" ||\r\n        child.node_type !== \"OPERATOR\" ||\r\n        child.value === \"in\"\r\n      )\r\n        return false;\r\n      else {\r\n        [node.value, child.value] = [child.value, node.value];\r\n        [node.type, child.type] = [child.type, node.type];\r\n        [node.expected_type, child.expected_type] = [\r\n          child.expected_type,\r\n          node.expected_type,\r\n        ];\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  swap_with_right(index: number) {\r\n    const node = this.find(index);\r\n    const child = node.right;\r\n    if (node) {\r\n      if (\r\n        node.node_type !== \"OPERATOR\" ||\r\n        child.node_type !== \"OPERATOR\" ||\r\n        child.value === \"in\"\r\n      )\r\n        return false;\r\n      else {\r\n        [node.value, child.value] = [child.value, node.value];\r\n        [node.type, child.type] = [child.type, node.type];\r\n        [node.expected_type, child.expected_type] = [\r\n          child.expected_type,\r\n          node.expected_type,\r\n        ];\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  print(start: TreeNode, traversal: string = \"\") {\r\n    if (start) {\r\n      if (start.node_type === \"OPERATOR\") {\r\n        traversal += \"(\";\r\n\r\n        traversal = this.print(start.left!, traversal);\r\n\r\n        traversal += \" \";\r\n\r\n        traversal += start.value.toUpperCase();\r\n\r\n        traversal += \" \";\r\n\r\n        traversal = this.print(start.right!, traversal);\r\n\r\n        traversal += \")\";\r\n      }\r\n\r\n      if (start.node_type === \"FUNCTION\" || start.node_type === \"ARGS\") {\r\n        traversal += start.value.toUpperCase() + \"(\";\r\n\r\n        if (start.args[0])\r\n          traversal = this.print(start.args[0], traversal) + \", \";\r\n        if (start.args[1])\r\n          traversal = this.print(start.args[1], traversal) + \", \";\r\n        if (start.args[2])\r\n          traversal = this.print(start.args[2], traversal) + \", \";\r\n        if (start.args[3])\r\n          traversal = this.print(start.args[3], traversal) + \", \";\r\n        if (start.args[4])\r\n          traversal = this.print(start.args[4], traversal) + \", \";\r\n        if (start.args[5])\r\n          traversal = this.print(start.args[5], traversal) + \", \";\r\n        if (start.args[6])\r\n          traversal = this.print(start.args[6], traversal) + \", \";\r\n        if (start.args[7])\r\n          traversal = this.print(start.args[7], traversal) + \", \";\r\n        if (start.args[8])\r\n          traversal = this.print(start.args[8], traversal) + \", \";\r\n        if (start.args[9]) traversal = this.print(start.args[9], traversal);\r\n\r\n        traversal += \")\";\r\n      }\r\n\r\n      if (start.node_type === \"OPERAND\") {\r\n        if (start.type === \"string\" && start.user_input) traversal += ' \"';\r\n        else traversal += \" \";\r\n\r\n        traversal += start.value;\r\n\r\n        if (start.type === \"string\" && start.user_input) traversal += '\" ';\r\n        else traversal += \" \";\r\n      }\r\n    }\r\n    return traversal;\r\n  }\r\n}\r\n\r\nexport default new Tree();\r\n","import { TextField, Button, Box } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { updateTree, getCurrentIndex, setCode } from \"../../store/codeSlice\";\r\nimport Tree from \"../../Tree\";\r\n\r\ntype Props = {\r\n  setNode: any;\r\n  onClose?: () => void;\r\n};\r\n\r\nexport const UserInput: React.FC<Props> = ({ setNode, onClose }) => {\r\n  const dispatch = useAppDispatch();\r\n  const index = useAppSelector(getCurrentIndex);\r\n  const node = Tree.find(index);\r\n  const [value, setValue] = React.useState(node.user_input ? node.value : \"\");\r\n\r\n  const handleClick = () => {\r\n    dispatch(setCode(value));\r\n    node.node_type = \"OPERAND\";\r\n    node.left = null;\r\n    node.right = null;\r\n    node.user_input = true;\r\n    node.type = isNaN(parseInt(value)) ? \"string\" : \"number\";\r\n    node.value = value;\r\n    node.checkType();\r\n    setNode(node);\r\n    dispatch(updateTree());\r\n    if (onClose) onClose();\r\n  };\r\n\r\n  const handleChange = (e: any) => {\r\n    node.type = isNaN(parseInt(e.target.value)) ? \"string\" : \"number\";\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Box display=\"flex\" padding={1} maxWidth={\"300px\"}>\r\n      <TextField\r\n        autoFocus\r\n        style={{ alignSelf: \"center\", flexGrow: 1 }}\r\n        placeholder=\"Пользовательский ввод\"\r\n        value={value}\r\n        onChange={handleChange}\r\n      />\r\n      <Button onClick={handleClick}>Ok</Button>\r\n    </Box>\r\n  );\r\n};\r\n","import { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n  })\r\n);\r\n","import React from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport InboxIcon from \"@material-ui/icons/Inbox\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { setCode, getCurrentIndex, updateTree } from \"../../store/codeSlice\";\r\nimport Tree from \"../../Tree\";\r\nimport { useStyles } from \"./styles\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nconst mapping_ = {\r\n  n: \"num\",\r\n  s: \"str\",\r\n  b: \"bool\",\r\n  d: \"date\",\r\n};\r\n\r\ntype Item = {\r\n  name: string;\r\n  type?: string;\r\n  arbitrary_args?: boolean;\r\n  is_operator?: boolean;\r\n  arguments_types?: string[];\r\n  return_type?: string;\r\n};\r\n\r\ntype Props = {\r\n  type: string;\r\n  items: Item[];\r\n};\r\n\r\nexport const CustomList: React.FC<Props> = ({ items, type }) => {\r\n  const dispatch = useAppDispatch();\r\n  const index_in_tree = useAppSelector(getCurrentIndex);\r\n  const classes = useStyles();\r\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n  const handleListItemClick = (\r\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n    index: number,\r\n    value: string\r\n  ) => {\r\n    setSelectedIndex(index);\r\n    dispatch(setCode(value));\r\n    const node = Tree.find(index_in_tree);\r\n\r\n    if (node) {\r\n      node.value = value;\r\n      node.node_type = items[index].is_operator\r\n        ? \"OPERATOR\"\r\n        : type === \"functions\"\r\n        ? \"FUNCTION\"\r\n        : \"OPERAND\";\r\n      node.left = null;\r\n      node.right = null;\r\n      node.user_input = false;\r\n\r\n      if (type === \"functions\") {\r\n        if (items[index].is_operator) {\r\n          node.setLeft(items[index].arguments_types![0]);\r\n          node.setArgs(\r\n            items[index].arbitrary_args,\r\n            items[index].arguments_types\r\n          );\r\n        } else {\r\n          node.args = [];\r\n          node.addArguments(items[index].arguments_types);\r\n          node.arbitrary_args = items[index].arbitrary_args;\r\n        }\r\n        node.type = items[index].return_type;\r\n      } else {\r\n        node.type = items[index].type;\r\n      }\r\n      node.checkType();\r\n      dispatch(updateTree());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <List component=\"nav\">\r\n        {items.map((item: Item, ind: number) => (\r\n          <ListItem\r\n            key={ind}\r\n            button\r\n            selected={selectedIndex === ind}\r\n            onClick={(event) => handleListItemClick(event, ind, item.name)}\r\n          >\r\n            <Typography\r\n              variant=\"subtitle2\"\r\n              style={{ fontStyle: \"italic\", paddingRight: 10 }}\r\n            >\r\n              {item.type\r\n                ? mapping_[item.type[0] as keyof typeof mapping_]\r\n                : mapping_[item.return_type![0] as keyof typeof mapping_]}\r\n            </Typography>\r\n            <ListItemText primary={item.name} />\r\n            {item.arguments_types\r\n              ? \"(\" + item.arguments_types.join(\",\") + \")\"\r\n              : \"\"}\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n","export const mapping_list_types = new Map();\r\nmapping_list_types.set(\"functions\", \"Функции\");\r\nmapping_list_types.set(\"variables\", \"Переменные\");\r\nmapping_list_types.set(\"facts\", \"Факты\");\r\nmapping_list_types.set(\"measures\", \"Меры\");\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles(() => ({\r\n  text: {\r\n    width: \"90%\",\r\n    margin: 10,\r\n    marginTop: 0,\r\n  },\r\n  wrapper: {\r\n    width: \"100%\",\r\n    overflow: \"hidden\",\r\n    flexGrow: 1,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  box: {\r\n    flexGrow: 1,\r\n    overflow: \"auto\",\r\n    width: \"100%\",\r\n    maxHeight: 300,\r\n  },\r\n}));\r\n","import TextField from \"@material-ui/core/TextField\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { CustomList } from \"../List\";\r\nimport { mapping_list_types } from \"./mapping\";\r\nimport { useStyles } from \"./styles\";\r\nimport { getData } from \"../../store/codeSlice\";\r\nimport { useAppSelector } from \"../../hooks\";\r\n\r\ntype Item = {\r\n  name: string;\r\n  arbitrary_args?: boolean;\r\n  type?: string;\r\n  arguments_types?: string[];\r\n};\r\n\r\nexport const Wrapper: React.FC<{ type: string }> = ({ type }) => {\r\n  const data = useAppSelector(getData);\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n  const [filtered, setFiltered] = useState<Item[]>(\r\n    data[type.toUpperCase() as keyof typeof data]\r\n  );\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    setFiltered(() =>\r\n      data[type.toUpperCase() as keyof typeof data].filter((item) =>\r\n        item.name.includes(search)\r\n      )\r\n    );\r\n  }, [search]);\r\n\r\n  return (\r\n    <Box className={classes.wrapper}>\r\n      <TextField\r\n        label={mapping_list_types.get(type)}\r\n        className={classes.text}\r\n        value={search}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n      />\r\n      <Box className={classes.box}>\r\n        <CustomList items={filtered} type={type} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles(() => {\r\n  return {\r\n    list: {\r\n      width: 250,\r\n    },\r\n    fullList: {\r\n      width: \"auto\",\r\n    },\r\n    btn: {\r\n      margin: 5,\r\n    },\r\n  };\r\n});\r\n","import { makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme) => ({\r\n  mathIcon: {\r\n    \"&:before\": {\r\n      fontFamily: \"MathIcon\",\r\n    },\r\n  },\r\n  eq: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f122\"',\r\n    },\r\n  },\r\n  ne: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f140\"',\r\n    },\r\n  },\r\n  gt: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f138\"',\r\n    },\r\n  },\r\n  gte: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f137\"',\r\n    },\r\n  },\r\n  lt: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f13a\"',\r\n    },\r\n  },\r\n  lte: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f13b\"',\r\n    },\r\n  },\r\n  plus: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f165\"',\r\n    },\r\n  },\r\n  mult: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f150\"',\r\n    },\r\n  },\r\n  or: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f142\"',\r\n    },\r\n  },\r\n  minus: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f14f\"',\r\n    },\r\n  },\r\n  in: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f134\"',\r\n    },\r\n  },\r\n  braces: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f15e\"',\r\n    },\r\n  },\r\n  union: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f17e\"',\r\n    },\r\n  },\r\n  divide: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f169\"',\r\n    },\r\n  },\r\n}));\r\n","import useStyles from \"./styles\";\r\nimport cn from \"classnames\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\ntype Props = {\r\n  value: string;\r\n};\r\n\r\nexport const CustomIcon: React.FC<Props> = ({ value }) => {\r\n  const classes = useStyles();\r\n  const getIcon = (value: string) => {\r\n    switch (value) {\r\n      case \"+\":\r\n        return <Box className={cn(classes.mathIcon, classes.plus)}></Box>;\r\n      case \"-\":\r\n        return <Box className={cn(classes.mathIcon, classes.minus)}></Box>;\r\n      case \"<\":\r\n        return <Box className={cn(classes.mathIcon, classes.lt)}></Box>;\r\n      case \"<=\":\r\n        return <Box className={cn(classes.mathIcon, classes.lte)}></Box>;\r\n      case \">\":\r\n        return <Box className={cn(classes.mathIcon, classes.gt)}></Box>;\r\n      case \">=\":\r\n        return <Box className={cn(classes.mathIcon, classes.gte)}></Box>;\r\n      case \"!=\":\r\n        return <Box className={cn(classes.mathIcon, classes.ne)}></Box>;\r\n      case \"==\":\r\n        return <Box className={cn(classes.mathIcon, classes.eq)}></Box>;\r\n      case \"*\":\r\n        return <Box className={cn(classes.mathIcon, classes.mult)}></Box>;\r\n      case \"/\":\r\n        return <Box className={cn(classes.mathIcon, classes.divide)}></Box>;\r\n      default:\r\n        return value;\r\n    }\r\n  };\r\n\r\n  return <>{getIcon(value)}</>;\r\n};\r\n","import Box from \"@material-ui/core/Box\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useStyles } from \"./styles\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { setCode, updateTree, getData } from \"../../store/codeSlice\";\r\nimport { CustomIcon } from \"../CustomIcon\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n};\r\n\r\nexport const CustomButtons: React.FC<Props> = ({ node }) => {\r\n  const classes = useStyles();\r\n  const dispatch = useAppDispatch();\r\n  const data = useAppSelector(getData);\r\n  const operators = data[\"OPERATORS\"];\r\n\r\n  return (\r\n    <Box display=\"flex\" justifyContent=\"flex-start\" flexWrap=\"wrap\">\r\n      {operators.map((operator) => (\r\n        <Button\r\n          className={classes.btn}\r\n          onClick={() => {\r\n            dispatch(setCode(operator.name));\r\n            if (node) {\r\n              node.value = operator.name;\r\n              node.node_type = \"OPERATOR\";\r\n              if (node.right && node.right.node_type === \"ARGS\")\r\n                node.right = new TreeNode(node.right.index);\r\n              node.user_input = false;\r\n              node.type = operator.return_type!;\r\n              node.setLeft(operator.arguments_types![0]);\r\n              node.setRight(operator.arguments_types![1]);\r\n            }\r\n            node.checkType();\r\n            dispatch(updateTree());\r\n          }}\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n        >\r\n          <CustomIcon value={operator.name} />\r\n        </Button>\r\n      ))}\r\n    </Box>\r\n  );\r\n};\r\n","import Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport SyncAltIcon from \"@material-ui/icons/SyncAlt\";\r\nimport Tree, { TreeNode } from \"../../Tree\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { updateTree } from \"../../store/codeSlice\";\r\nimport { useState } from \"react\";\r\nimport { CustomIcon } from \"../CustomIcon\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\ntype Props = {\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n  node: TreeNode;\r\n  setNode: any;\r\n};\r\n\r\ntype UserInputProps = {\r\n  value: string;\r\n  type: string;\r\n};\r\n\r\nconst UserInput: React.FC<UserInputProps> = ({ value, type }) => {\r\n  if (type === \"string\") {\r\n    if (value[0] === '\"') return <Box color=\"brown\">{value}</Box>;\r\n    else return <Box color=\"brown\">\"{value}\"</Box>;\r\n  } else {\r\n    return <CustomIcon value={parseFloat(value).toString()} />;\r\n  }\r\n};\r\n\r\nexport const Trigger: React.FC<Props> = ({ onClick, node, setNode }) => {\r\n  const dispatch = useAppDispatch();\r\n  const [show_delete, setShowDelete] = useState(false);\r\n\r\n  const handleDelete = (e: any) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    Tree.delete(node.index);\r\n    const new_node = Tree.find(node.index);\r\n    setNode(new_node);\r\n    dispatch(updateTree());\r\n  };\r\n\r\n  const handleSwapLeft = (e: any) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    Tree.swap_with_left(node.index);\r\n    dispatch(updateTree());\r\n  };\r\n\r\n  const handleSwapRight = (e: any) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    Tree.swap_with_right(node.index);\r\n    dispatch(updateTree());\r\n  };\r\n\r\n  return node.value ? (\r\n    <Button\r\n      onClick={onClick}\r\n      disableRipple={true}\r\n      style={{ position: \"relative\" }}\r\n      onMouseEnter={() => setShowDelete(true)}\r\n      onMouseLeave={() => setShowDelete(false)}\r\n    >\r\n      <Box display=\"flex\" flexDirection=\"column\">\r\n        {node.type_error && (\r\n          <Typography variant=\"caption\" style={{ color: \"red\", fontSize: 10 }}>\r\n            expected: {node.expected_type}\r\n          </Typography>\r\n        )}\r\n        <Box color={node.type_error ? \"red\" : \"unset\"}>\r\n          {node.user_input ? (\r\n            <UserInput value={node.value} type={node.type} />\r\n          ) : (\r\n            <CustomIcon value={node.value} />\r\n          )}\r\n        </Box>\r\n      </Box>\r\n      {show_delete && (\r\n        <IconButton\r\n          size=\"small\"\r\n          onClick={handleDelete}\r\n          style={{ position: \"absolute\", top: -5, right: -5 }}\r\n        >\r\n          <ClearIcon style={{ fontSize: 15 }} />\r\n        </IconButton>\r\n      )}\r\n      {show_delete && node.left && node.left.node_type === \"OPERATOR\" && (\r\n        <IconButton\r\n          size=\"small\"\r\n          onClick={handleSwapLeft}\r\n          style={{ position: \"absolute\", top: 7, left: -5 }}\r\n        >\r\n          <SyncAltIcon style={{ fontSize: 15 }} />\r\n        </IconButton>\r\n      )}\r\n      {show_delete && node.right && node.right.node_type === \"OPERATOR\" && (\r\n        <IconButton\r\n          size=\"small\"\r\n          onClick={handleSwapRight}\r\n          style={{ position: \"absolute\", top: 7, right: -5 }}\r\n        >\r\n          <SyncAltIcon style={{ fontSize: 15 }} />\r\n        </IconButton>\r\n      )}\r\n    </Button>\r\n  ) : (\r\n    <IconButton onClick={onClick}>\r\n      <AddIcon />\r\n    </IconButton>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { UserInput } from \"../UserInput\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport { Wrapper } from \"../Wrapper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport { CustomButtons } from \"../CustomButtons\";\r\nimport Tree, { TreeNode } from \"../../Tree\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { setCurrentIndex, getCode } from \"../../store/codeSlice\";\r\nimport { Trigger } from \"../Trigger\";\r\n\r\nexport const CustomPopover: React.FC<{ index: number }> = ({ index }) => {\r\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(\r\n    null\r\n  );\r\n\r\n  const dispatch = useAppDispatch();\r\n  const [node, setNode] = React.useState<TreeNode>(Tree.find(index));\r\n  const [show, setShow] = React.useState<boolean>(false);\r\n  const [type, setType] = React.useState<string | null>(null);\r\n  const [open, setOpen] = React.useState(false);\r\n  const code = useAppSelector(getCode);\r\n\r\n  useEffect(() => {\r\n    setNode(Tree.find(index));\r\n  }, [index]);\r\n\r\n  useEffect(() => {\r\n    setAnchorEl(null);\r\n    setOpen(false);\r\n  }, [code]);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n    setOpen(true);\r\n    dispatch(setCurrentIndex(index));\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleListItemClick = (_type: string) => {\r\n    setShow(true);\r\n    setType(_type);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setShow(false);\r\n    setType(null);\r\n  };\r\n\r\n  const getComponent = () => {\r\n    switch (type) {\r\n      case \"functions\":\r\n        return <Wrapper type=\"functions\" />;\r\n      case \"variables\":\r\n        return <Wrapper type=\"variables\" />;\r\n    }\r\n  };\r\n\r\n  const id = open ? \"simple-popover\" : undefined;\r\n\r\n  return (\r\n    <div>\r\n      <Trigger node={node} onClick={handleClick} setNode={setNode} />\r\n      {open && (\r\n        <Popover\r\n          id={id}\r\n          open={open}\r\n          anchorEl={anchorEl}\r\n          onClose={handleClose}\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"center\",\r\n          }}\r\n          transformOrigin={{\r\n            vertical: \"top\",\r\n            horizontal: \"center\",\r\n          }}\r\n        >\r\n          <Box position=\"relative\" maxWidth=\"300px\">\r\n            <UserInput setNode={setNode} onClose={handleClose} />\r\n            <CustomButtons node={node} />\r\n            <List component=\"nav\">\r\n              <ListItem\r\n                key={0}\r\n                button\r\n                onClick={() => handleListItemClick(\"variables\")}\r\n              >\r\n                <ListItemText primary={\"Переменные\"} />\r\n                <ListItemIcon style={{ minWidth: 0 }}>\r\n                  <ArrowForwardIosIcon />\r\n                </ListItemIcon>\r\n              </ListItem>\r\n\r\n              <ListItem\r\n                key={3}\r\n                button\r\n                onClick={() => handleListItemClick(\"functions\")}\r\n              >\r\n                <ListItemText primary={\"Функции\"} />\r\n                <ListItemIcon style={{ minWidth: 0 }}>\r\n                  <ArrowForwardIosIcon />\r\n                </ListItemIcon>\r\n              </ListItem>\r\n            </List>\r\n            {show && (\r\n              <Box\r\n                position=\"absolute\"\r\n                left=\"0px\"\r\n                top=\"0px\"\r\n                width=\"100%\"\r\n                overflow=\"hidden\"\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                height=\"100%\"\r\n                bgcolor=\"white\"\r\n              >\r\n                <IconButton\r\n                  onClick={handleCancel}\r\n                  style={{\r\n                    marginTop: 10,\r\n                    marginLeft: 10,\r\n                    alignSelf: \"flex-start\",\r\n                  }}\r\n                >\r\n                  <ArrowBackIosIcon />\r\n                </IconButton>\r\n                {getComponent()}\r\n              </Box>\r\n            )}\r\n          </Box>\r\n        </Popover>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { Wrapper } from \"../Wrapper\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { setCurrentIndex, getCode } from \"../../store/codeSlice\";\r\nimport Tree from \"../../Tree\";\r\nimport { CustomButtons } from \"../CustomButtons\";\r\nimport { useAppSelector } from \"../../hooks\";\r\nimport { UserInput } from \"../UserInput\";\r\nimport { Trigger } from \"../Trigger\";\r\n\r\nexport const CustomDrawer: React.FC<{\r\n  index: number;\r\n}> = ({ index }) => {\r\n  const dispatch = useAppDispatch();\r\n  const [state, setState] = React.useState(false);\r\n  const [node, setNode] = React.useState(Tree.find(index));\r\n  const code = useAppSelector(getCode);\r\n\r\n  useEffect(() => {\r\n    setState(false);\r\n  }, [code]);\r\n\r\n  const toggleDrawer =\r\n    (open: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\r\n      if (\r\n        event.type === \"keydown\" &&\r\n        ((event as React.KeyboardEvent).key === \"Tab\" ||\r\n          (event as React.KeyboardEvent).key === \"Shift\")\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      if (open) dispatch(setCurrentIndex(index));\r\n      setState(open);\r\n    };\r\n\r\n  const list = () => (\r\n    <Box display=\"flex\">\r\n      <Wrapper type=\"functions\" />\r\n      <Wrapper type=\"variables\" />\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Trigger node={node} onClick={toggleDrawer(true)} setNode={setNode} />\r\n      <Drawer anchor={\"bottom\"} open={state} onClose={toggleDrawer(false)}>\r\n        <UserInput setNode={setNode} />\r\n        <CustomButtons node={node} />\r\n        {list()}\r\n      </Drawer>\r\n    </div>\r\n  );\r\n};\r\n","import { CustomPopover } from \"../CustomPopover\";\r\nimport { CustomDrawer } from \"../Drawer\";\r\nimport { useAppSelector } from \"../../hooks\";\r\nimport { getDrawer } from \"../../store/codeSlice\";\r\n\r\nexport const Leaf: React.FC<{ index: number }> = ({ index }) => {\r\n  const drawer = useAppSelector(getDrawer);\r\n\r\n  return drawer ? (\r\n    <CustomDrawer index={index} />\r\n  ) : (\r\n    <CustomPopover index={index} />\r\n  );\r\n};\r\n","import { makeStyles, Theme } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles<Theme, { state: boolean }>({\r\n  box: {\r\n    cursor: \"pointer\",\r\n    margin: 5,\r\n    padding: 5,\r\n    borderLeft: ({ state }) => (state ? \"2px solid black\" : \"none\"),\r\n    borderRight: ({ state }) => (state ? \"2px solid black\" : \"none\"),\r\n    flexDirection: ({ state }) => (state ? \"column\" : \"row\"),\r\n    alignItems: \"center\",\r\n    display: \"flex\",\r\n    borderRadius: 10,\r\n  },\r\n  typography: {\r\n    margin: 5,\r\n    fontSize: 25,\r\n  },\r\n  mid: {\r\n    padding: 15,\r\n    fontSize: 25,\r\n  },\r\n});\r\n","import { Func } from \"./\";\r\nimport { Node } from \"../Node\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport { Leaf } from \"../Leaf\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n};\r\n\r\nexport const ComponentSelector: React.FC<Props> = ({ node }) => {\r\n  switch (node.node_type) {\r\n    case \"FUNCTION\":\r\n      return <Func node={node} />;\r\n    case \"OPERATOR\":\r\n      return <Node node={node} />;\r\n    default:\r\n      return <Leaf index={node.index} />;\r\n  }\r\n};\r\n","import { Box } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport { useState } from \"react\";\r\nimport { useStyles } from \"./styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { updateTree } from \"../../store/codeSlice\";\r\nimport { Leaf } from \"../Leaf\";\r\nimport { ComponentSelector } from \"./ComponentSelector\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n};\r\n\r\nexport const Func: React.FC<Props> = ({ node }) => {\r\n  const dispatch = useAppDispatch();\r\n  const [state, setState] = useState<boolean>(false);\r\n  const [show, setShow] = useState(false);\r\n  const classes = useStyles({ state });\r\n  const handleClick = () => setState(!state);\r\n\r\n  const handleAddClick = () => {\r\n    node.addArguments();\r\n    dispatch(updateTree());\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      alignItems=\"center\"\r\n      color={node.type_error ? \"red\" : \"unset\"}\r\n      onMouseEnter={() => setShow(true)}\r\n      onMouseLeave={() => setShow(false)}\r\n    >\r\n      <Leaf index={node.index} />\r\n      {!state && <Typography className={classes.typography}>(</Typography>}\r\n      <Box className={classes.box}>\r\n        {node.args &&\r\n          node.args.map((arg: TreeNode, i: number) => {\r\n            return i === node.args.length - 1 ? (\r\n              <ComponentSelector node={arg} />\r\n            ) : (\r\n              <>\r\n                <ComponentSelector node={arg} />\r\n                <Typography className={classes.mid} onClick={handleClick}>\r\n                  ,\r\n                </Typography>\r\n              </>\r\n            );\r\n          })}\r\n        {node.arbitrary_args && show && node.args.length < 10 && (\r\n          <IconButton size=\"small\" onClick={handleAddClick}>\r\n            <AddIcon style={{ fontSize: 15 }} />\r\n          </IconButton>\r\n        )}\r\n      </Box>\r\n\r\n      {!state && <Typography className={classes.typography}>)</Typography>}\r\n    </Box>\r\n  );\r\n};\r\n","import { makeStyles, Theme } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles<Theme, { state: boolean }>({\r\n  box: {\r\n    cursor: \"pointer\",\r\n    margin: 5,\r\n    padding: 5,\r\n    borderLeft: ({ state }) => (state ? \"2px solid black\" : \"none\"),\r\n    borderRight: ({ state }) => (state ? \"2px solid black\" : \"none\"),\r\n    flexDirection: ({ state }) => (state ? \"column\" : \"row\"),\r\n    alignItems: \"center\",\r\n    display: \"flex\",\r\n    borderRadius: 10,\r\n  },\r\n  typography: {\r\n    margin: 5,\r\n    fontSize: 25,\r\n  },\r\n  mid: {\r\n    padding: 15,\r\n    fontSize: 25,\r\n  },\r\n});\r\n","import { Box } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Node } from \"../Node\";\r\nimport { Func } from \"../Func\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport { useState } from \"react\";\r\nimport { useStyles } from \"./styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { updateTree } from \"../../store/codeSlice\";\r\nimport { Leaf } from \"../Leaf\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n};\r\n\r\nexport const Args: React.FC<Props> = ({ node }) => {\r\n  const dispatch = useAppDispatch();\r\n  const [state, setState] = useState<boolean>(false);\r\n  const [show, setShow] = useState(false);\r\n  const classes = useStyles({ state });\r\n  const handleClick = () => setState(!state);\r\n\r\n  const getComponent = (node: TreeNode) => {\r\n    switch (node.node_type) {\r\n      case \"FUNCTION\":\r\n        return <Func node={node} />;\r\n\r\n      case \"OPERATOR\":\r\n        return <Node node={node} />;\r\n      default:\r\n        return <Leaf index={node.index} />;\r\n    }\r\n  };\r\n\r\n  const handleAddClick = () => {\r\n    node.addArguments();\r\n    dispatch(updateTree());\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      alignItems=\"center\"\r\n      onMouseEnter={() => setShow(true)}\r\n      onMouseLeave={() => setShow(false)}\r\n    >\r\n      {!state && <Typography className={classes.typography}>(</Typography>}\r\n      <Box className={classes.box}>\r\n        {node.args &&\r\n          node.args.map((arg: TreeNode, i: number) => {\r\n            return i === node.args.length - 1 ? (\r\n              getComponent(arg)\r\n            ) : (\r\n              <>\r\n                {getComponent(arg)}\r\n                <Typography className={classes.mid} onClick={handleClick}>\r\n                  ,\r\n                </Typography>\r\n              </>\r\n            );\r\n          })}\r\n        {node.arbitrary_args && show && node.args.length < 10 && (\r\n          <IconButton size=\"small\" onClick={handleAddClick}>\r\n            <AddIcon style={{ fontSize: 15 }} />\r\n          </IconButton>\r\n        )}\r\n      </Box>\r\n\r\n      {!state && <Typography className={classes.typography}>)</Typography>}\r\n    </Box>\r\n  );\r\n};\r\n","import { Func } from \"../Func\";\r\nimport { Node } from \"./\";\r\nimport { Args } from \"../Args\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport { Leaf } from \"../Leaf\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n};\r\n\r\nexport const ComponentSelector: React.FC<Props> = ({ node }) => {\r\n  switch (node.node_type) {\r\n    case \"FUNCTION\":\r\n      return <Func node={node} />;\r\n    case \"OPERATOR\":\r\n      return <Node node={node} />;\r\n    case \"ARGS\":\r\n      return <Args node={node} />;\r\n    default:\r\n      return <Leaf index={node.index} />;\r\n  }\r\n};\r\n","import { Box } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport { useAppSelector } from \"../../hooks\";\r\nimport { getBrace } from \"../../store/codeSlice\";\r\nimport { useStyles } from \"./styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AutorenewIcon from \"@material-ui/icons/Autorenew\";\r\nimport { Leaf } from \"../Leaf\";\r\nimport { ComponentSelector } from \"./ComponentSelector\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n};\r\n\r\nexport const Node: React.FC<Props> = ({ node }) => {\r\n  const brace = useAppSelector(getBrace);\r\n  const [state, setState] = useState(false);\r\n  const [visible, setVisible] = useState(false);\r\n  const classes = useStyles({ state, brace });\r\n\r\n  const handleClick = () => setState(!state);\r\n\r\n  return (\r\n    <Box\r\n      color={node.type_error ? \"red\" : \"unset\"}\r\n      className={classes.box}\r\n      onMouseEnter={() => setVisible(true)}\r\n      onMouseLeave={() => setVisible(false)}\r\n    >\r\n      {/* {visible && ( */}\r\n      <IconButton onClick={handleClick} className={classes.btn} size={\"small\"}>\r\n        <AutorenewIcon className={classes.icon} />\r\n      </IconButton>\r\n      {/* )} */}\r\n      {node.left && !node.type_error && <ComponentSelector node={node.left} />}\r\n      <Leaf index={node.index} />\r\n      {node.right && !node.type_error && (\r\n        <ComponentSelector node={node.right} />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","import { makeStyles, Theme } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles(() => ({\r\n  box: {\r\n    width: 1000,\r\n    height: 700,\r\n    margin: \"auto\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    position: \"relative\",\r\n  },\r\n  inner_box: {\r\n    margin: \"auto\",\r\n  },\r\n}));\r\n","import Box from \"@material-ui/core/Box\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { toggleDrawer, toggleBrace, updateTree } from \"../../store/codeSlice\";\r\n\r\nimport Tree, { TreeNode } from \"../../Tree\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\n\r\nexport const Settings = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleDrawer = () => dispatch(toggleDrawer());\r\n\r\n  const handleBrace = () => dispatch(toggleBrace());\r\n\r\n  const handleReset = () => {\r\n    Tree.root = new TreeNode();\r\n    dispatch(updateTree());\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      position=\"absolute\"\r\n      right=\"-50px\"\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n    >\r\n      <IconButton onClick={handleDrawer}>\r\n        <SettingsIcon />\r\n      </IconButton>\r\n      <IconButton onClick={handleBrace}>()</IconButton>\r\n      <IconButton onClick={handleReset}>\r\n        <ClearIcon />\r\n      </IconButton>\r\n    </Box>\r\n  );\r\n};\r\n","import Box from \"@material-ui/core/Box\";\r\nimport { Node } from \"../Node\";\r\nimport { Func } from \"../Func\";\r\nimport Tree, { TreeNode } from \"../../Tree\";\r\nimport { useEffect } from \"react\";\r\nimport { useAppSelector, useAppDispatch } from \"../../hooks\";\r\nimport { getUpdateTree, toggleText } from \"../../store/codeSlice\";\r\nimport { useStyles } from \"./styles\";\r\nimport { Settings } from \"./Settings\";\r\nimport { Leaf } from \"../Leaf\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nexport const VisualBuilder = () => {\r\n  const update_tree = useAppSelector(getUpdateTree);\r\n  const classes = useStyles();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClick = () => dispatch(toggleText());\r\n\r\n  useEffect(() => {\r\n    traversTree(Tree.root);\r\n  }, [update_tree]);\r\n\r\n  const traversTree = (node: TreeNode) => {\r\n    if (node.node_type === \"OPERAND\") return <Leaf index={node.index} />;\r\n    else if (node.node_type === \"FUNCTION\") return <Func node={node} />;\r\n    else return <Node node={node} />;\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      margin=\"auto\"\r\n      position=\"relative\"\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n    >\r\n      <Settings />\r\n      <Paper className={classes.box} elevation={3}>\r\n        <Box className={classes.inner_box}>{traversTree(Tree.root)}</Box>\r\n      </Paper>\r\n      <Button style={{ alignSelf: \"flex-end\" }} onClick={handleClick}>\r\n        Ok\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n","export const DATA = {\r\n  VARIABLES: [\r\n    { name: \"DISTANCE\", type: \"number\" },\r\n    { name: \"LENGHT\", type: \"number\" },\r\n    { name: \"HEIGHT\", type: \"number\" },\r\n    { name: \"WEIGHT\", type: \"number\" },\r\n    { name: \"LATITUDE\", type: \"number\" },\r\n    { name: \"REPLICAS\", type: \"number\" },\r\n    { name: \"CODE_GENDER\", type: \"string\" },\r\n    { name: \"AMT_ANNUITY\", type: \"number\" },\r\n    { name: \"CNT_FAM_MEMBERS\", type: \"string\" },\r\n  ],\r\n  OPERATORS: [\r\n    {\r\n      name: \"and\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"boolean\", \"boolean\"],\r\n    },\r\n    {\r\n      name: \"or\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"boolean\", \"boolean\"],\r\n    },\r\n    {\r\n      name: \"+\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\", \"number\"],\r\n    },\r\n    {\r\n      name: \"-\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\", \"number\"],\r\n    },\r\n    {\r\n      name: \"*\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\", \"number\"],\r\n    },\r\n    {\r\n      name: \"/\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\", \"number\"],\r\n    },\r\n    {\r\n      name: \"<\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"any\", \"any\"],\r\n    },\r\n    {\r\n      name: \"<=\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"any\", \"any\"],\r\n    },\r\n    {\r\n      name: \"==\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"any\", \"any\"],\r\n    },\r\n    {\r\n      name: \"!=\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"any\", \"any\"],\r\n    },\r\n    {\r\n      name: \">\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"any\", \"any\"],\r\n    },\r\n    {\r\n      name: \">=\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"any\", \"any\"],\r\n    },\r\n    {\r\n      name: \"like\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"string\", \"string\"],\r\n    },\r\n    {\r\n      name: \"ilike\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"string\", \"string\"],\r\n    },\r\n    {\r\n      name: \"contains\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"string\", \"string\"],\r\n    },\r\n  ],\r\n  FUNCTIONS: [\r\n    { name: \"curent_date\", return_type: \"datetime\", arguments_types: [] },\r\n    { name: \"current_time\", return_type: \"datetime\", arguments_types: [] },\r\n    { name: \"current_timestamp\", return_type: \"number\", arguments_types: [] },\r\n    { name: \"now\", return_type: \"datetime\", arguments_types: [] },\r\n    {\r\n      name: \"concat\",\r\n      arbitrary_args: true,\r\n      return_type: \"string\",\r\n      arguments_types: [\"string\"],\r\n    },\r\n    {\r\n      name: \"cahr_length\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"string\"],\r\n    },\r\n    { name: \"random\", return_type: \"number\", arguments_types: [] },\r\n    {\r\n      name: \"coalesce\",\r\n      arbitrary_args: true,\r\n      return_type: \"any\",\r\n      arguments_types: [\"any\"],\r\n    },\r\n    {\r\n      name: \"in\",\r\n      is_operator: true,\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"any\"],\r\n      arbitrary_args: true,\r\n    },\r\n    {\r\n      name: \"between\",\r\n      is_operator: true,\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"number\", \"number\"],\r\n      arbitrary_args: false,\r\n    },\r\n    {\r\n      name: \"not_in\",\r\n      is_operator: true,\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"any\"],\r\n      arbitrary_args: true,\r\n    },\r\n    {\r\n      name: \"startwith\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"string\"],\r\n    },\r\n    {\r\n      name: \"endwith\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"string\"],\r\n    },\r\n    {\r\n      name: \"not\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"boolean\"],\r\n    },\r\n    {\r\n      name: \"power\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\", \"number\"],\r\n    },\r\n    {\r\n      name: \"ln\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\"],\r\n    },\r\n    {\r\n      name: \"exp\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\"],\r\n    },\r\n    {\r\n      name: \"sqrt\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\"],\r\n    },\r\n    {\r\n      name: \"abs\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\"],\r\n    },\r\n    {\r\n      name: \"ceil\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\"],\r\n    },\r\n    {\r\n      name: \"floor\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\"],\r\n    },\r\n  ],\r\n};\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: \"2px 4px\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    width: 800,\r\n    margin: \"auto\",\r\n  },\r\n  divider: {\r\n    height: 28,\r\n    margin: 4,\r\n  },\r\n  iconButton: {\r\n    padding: 10,\r\n  },\r\n  input: {\r\n    marginLeft: theme.spacing(1),\r\n    flex: 1,\r\n  },\r\n}));\r\n","import { useState, useEffect } from \"react\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport { useAppSelector, useAppDispatch } from \"../../hooks\";\r\nimport { getUpdateTree, toggleText } from \"../../store/codeSlice\";\r\nimport Tree from \"../../Tree\";\r\nimport { useStyles } from \"./styles\";\r\nimport DeviceHubIcon from \"@material-ui/icons/DeviceHub\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nexport const TextInput = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useAppDispatch();\r\n  const update_tree = useAppSelector(getUpdateTree);\r\n\r\n  useEffect(() => {\r\n    setValue(Tree.print(Tree.root, \"\"));\r\n  }, [update_tree]);\r\n\r\n  const handleClick = () => dispatch(toggleText());\r\n\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <InputBase\r\n        className={classes.input}\r\n        placeholder=\"Формула\"\r\n        inputProps={{ \"aria-label\": \"formula\" }}\r\n        value={value}\r\n      />\r\n      <Divider className={classes.divider} orientation=\"vertical\" />\r\n      <IconButton\r\n        color=\"primary\"\r\n        className={classes.iconButton}\r\n        aria-label=\"builder\"\r\n        onClick={handleClick}\r\n      >\r\n        <DeviceHubIcon />\r\n      </IconButton>\r\n    </Paper>\r\n  );\r\n};\r\n","import { VisualBuilder } from \"../VisualBuilder\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { useEffect } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { setData, getText } from \"../../store/codeSlice\";\r\nimport { DATA } from \"../../data\";\r\nimport { TextInput } from \"../TextInput\";\r\n\r\nexport const App = () => {\r\n  const text = useAppSelector(getText);\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(setData(DATA));\r\n  }, []);\r\n\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      height=\"100vh\"\r\n      width=\"100%\"\r\n      flexDirection=\"column\"\r\n      justifyContent=\"center\"\r\n    >\r\n      {text ? <TextInput /> : <VisualBuilder />}\r\n    </Box>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport codeReducer from \"./codeSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    code: codeReducer,\r\n  },\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./components/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}