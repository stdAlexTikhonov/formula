{"version":3,"sources":["hooks.ts","store/codeSlice.ts","components/Node/styles.ts","Tree.ts","components/UserInput/index.tsx","components/List/styles.ts","components/List/index.tsx","components/Wrapper/mapping.ts","components/Wrapper/styles.ts","components/Wrapper/index.tsx","components/CustomButtons/styles.ts","components/CustomIcon/styles.ts","components/CustomIcon/index.tsx","components/CustomButtons/index.tsx","components/Trigger/index.tsx","components/CustomPopover/index.tsx","components/Drawer/index.tsx","components/Leaf/index.tsx","components/Func/styles.ts","components/Func/ComponentSelector.tsx","components/Func/index.tsx","components/Args/styles.ts","components/Args/index.tsx","components/Node/ComponentSelector.tsx","components/Node/index.tsx","components/VisualBuilder/styles.ts","components/VisualBuilder/Settings.tsx","components/VisualBuilder/index.tsx","data/index.ts","components/App/index.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","codeSlice","createSlice","name","initialState","value","index","brace","update_tree","data","drawer","text","reducers","setCode","state","action","payload","setData","setCurrentIndex","toggleBrace","updateTree","toggleDrawer","toggleText","actions","getCode","code","getCurrentIndex","getBrace","getUpdateTree","getData","getDrawer","getText","useStyles","makeStyles","box","display","alignItems","flexDirection","cursor","borderLeft","borderRight","margin","padding","position","borderRadius","mid","fontSize","btn","top","right","icon","TreeNode","node_type","left","args","arbitrary_args","user_input","expected_type","type","this","arguments_types","i","length","count","node","push","addArguments","root","_find","_delete","find","child","UserInput","setNode","dispatch","Tree","React","useState","setValue","Box","maxWidth","TextField","autoFocus","style","alignSelf","flexGrow","placeholder","onChange","e","isNaN","parseInt","target","Button","onClick","theme","createStyles","width","backgroundColor","palette","background","paper","mapping_","n","s","b","d","CustomList","items","index_in_tree","classes","selectedIndex","setSelectedIndex","className","List","component","map","item","ind","ListItem","button","selected","event","is_operator","setLeft","setArgs","return_type","handleListItemClick","Typography","variant","fontStyle","paddingRight","ListItemText","primary","join","mapping_list_types","Map","set","marginTop","wrapper","overflow","maxHeight","Wrapper","search","setSearch","toUpperCase","filtered","setFiltered","useEffect","filter","includes","label","get","list","fullList","mathIcon","fontFamily","eq","content","ne","gt","gte","lt","lte","plus","mult","or","minus","in","braces","union","divide","CustomIcon","cn","getIcon","CustomButtons","operators","justifyContent","flexWrap","operator","setRight","size","Trigger","show_delete","setShowDelete","disableRipple","onMouseEnter","onMouseLeave","color","IconButton","preventDefault","stopPropagation","delete","swap_with_left","swap_with_right","CustomPopover","anchorEl","setAnchorEl","show","setShow","setType","open","setOpen","_type","id","undefined","currentTarget","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","ListItemIcon","minWidth","height","bgcolor","marginLeft","getComponent","CustomDrawer","setState","key","Drawer","anchor","Leaf","typography","ComponentSelector","Func","handleClick","arg","Args","Node","visible","setVisible","border","Settings","VisualBuilder","traversTree","DATA","VARIABLES","OPERATORS","FUNCTIONS","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","codeReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7894b95.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store/store\";\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport type { RootState } from \"./store\";\r\n\r\ntype Item = {\r\n  name: string;\r\n  arguments_types?: string[];\r\n  return_type?: string;\r\n  type?: string;\r\n  is_operator?: boolean;\r\n  arbitrary_args?: boolean;\r\n};\r\n\r\ninterface CodeSlice {\r\n  value: string;\r\n  index: number;\r\n  brace: boolean;\r\n  update_tree: boolean;\r\n  data: {\r\n    [key: string]: Item[];\r\n  };\r\n  drawer: boolean;\r\n  text: boolean;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: CodeSlice = {\r\n  value: \"\",\r\n  index: 0,\r\n  brace: false,\r\n  update_tree: false,\r\n  data: {},\r\n  drawer: false,\r\n  text: false,\r\n};\r\n\r\nexport const codeSlice = createSlice({\r\n  name: \"code\",\r\n  initialState,\r\n  reducers: {\r\n    setCode: (state, action: PayloadAction<string>) => {\r\n      state.value = action.payload;\r\n    },\r\n    setData: (state, action: PayloadAction<any>) => {\r\n      state.data = action.payload;\r\n    },\r\n    setCurrentIndex: (state, action: PayloadAction<number>) => {\r\n      state.index = action.payload;\r\n    },\r\n    toggleBrace: (state) => {\r\n      state.brace = !state.brace;\r\n    },\r\n    updateTree: (state) => {\r\n      state.update_tree = !state.update_tree;\r\n    },\r\n    toggleDrawer: (state) => {\r\n      state.drawer = !state.drawer;\r\n    },\r\n    toggleText: (state) => {\r\n      state.text = !state.text;\r\n    },\r\n    // incrementByAmount: (state, action: PayloadAction<number>) => {\r\n    //   state.value += action.payload;\r\n    // },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const {\r\n  setCode,\r\n  setCurrentIndex,\r\n  toggleBrace,\r\n  updateTree,\r\n  setData,\r\n  toggleDrawer,\r\n  toggleText,\r\n} = codeSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const getCode = (state: RootState) => state.code.value;\r\n\r\nexport const getCurrentIndex = (state: RootState) => state.code.index;\r\n\r\nexport const getBrace = (state: RootState) => state.code.brace;\r\n\r\nexport const getUpdateTree = (state: RootState) => state.code.update_tree;\r\n\r\nexport const getData = (state: RootState) => state.code.data;\r\n\r\nexport const getDrawer = (state: RootState) => state.code.drawer;\r\n\r\nexport const getText = (state: RootState) => state.code.text;\r\n\r\nexport default codeSlice.reducer;\r\n","import { makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles<Theme, { state: boolean; brace: boolean }>({\r\n  box: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    flexDirection: ({ state }) => (state ? \"column\" : \"row\"),\r\n    cursor: \"pointer\",\r\n    borderLeft: ({ brace }) => (brace ? \"2px solid black\" : \"none\"),\r\n    borderRight: ({ brace }) => (brace ? \"2px solid black\" : \"none\"),\r\n    margin: 5,\r\n    padding: 5,\r\n    position: \"relative\",\r\n    borderRadius: 10,\r\n  },\r\n  mid: {\r\n    margin: 15,\r\n    fontSize: 25,\r\n  },\r\n  btn: {\r\n    position: \"absolute\",\r\n    top: -18,\r\n    right: -12,\r\n  },\r\n  icon: {\r\n    fontSize: 15,\r\n  },\r\n});\r\n","export class TreeNode {\r\n  node_type: string;\r\n  index: number;\r\n  value: string;\r\n  left: TreeNode | null;\r\n  right: TreeNode | null;\r\n  args: TreeNode[];\r\n  arbitrary_args: boolean;\r\n  user_input: boolean;\r\n  expected_type: string;\r\n  type: string;\r\n  static count: number = 0;\r\n\r\n  constructor(index: number = 0, node_type: string = \"OPERAND\") {\r\n    this.index = index;\r\n    this.node_type = node_type;\r\n    this.value = \"\";\r\n    this.left = null;\r\n    this.right = null;\r\n    this.args = [];\r\n    this.user_input = false;\r\n    this.arbitrary_args = false;\r\n    this.expected_type = \"any\";\r\n    this.type = \"hello\";\r\n  }\r\n\r\n  setValue(value: string) {\r\n    this.value = value;\r\n  }\r\n\r\n  addArguments(arguments_types: string[]) {\r\n    let i = 0;\r\n    while (i < arguments_types.length) {\r\n      TreeNode.count++;\r\n      const node = new TreeNode(TreeNode.count);\r\n      node.expected_type = arguments_types[i];\r\n      this.args.push(node);\r\n      i++;\r\n    }\r\n  }\r\n\r\n  setLeft(expected_type: string) {\r\n    TreeNode.count++;\r\n    this.left = new TreeNode(TreeNode.count);\r\n    this.left.expected_type = expected_type;\r\n  }\r\n\r\n  setRight(expected_type: string) {\r\n    TreeNode.count++;\r\n    this.right = new TreeNode(TreeNode.count);\r\n    this.right.expected_type = expected_type;\r\n  }\r\n\r\n  setArgs(arbitrary_args: boolean, arguments_types: string[]) {\r\n    TreeNode.count++;\r\n    this.right = new TreeNode(TreeNode.count, \"ARGS\");\r\n    this.right.arbitrary_args = arbitrary_args;\r\n    if (arguments_types) this.right.addArguments(arguments_types);\r\n  }\r\n}\r\nclass Tree {\r\n  root: TreeNode = new TreeNode();\r\n\r\n  find(index: number) {\r\n    if (this.root.index === index) {\r\n      return this.root;\r\n    } else if (\r\n      this.root.node_type === \"OPERAND\" ||\r\n      this.root.node_type === \"OPERATOR\"\r\n    )\r\n      return (\r\n        this._find(this.root.left, index) || this._find(this.root.right, index)\r\n      );\r\n    else if (this.root.node_type === \"FUNCTION\")\r\n      return (\r\n        this._find(this.root.args[0], index) ||\r\n        this._find(this.root.args[1], index) ||\r\n        this._find(this.root.args[2], index) ||\r\n        this._find(this.root.args[3], index) ||\r\n        this._find(this.root.args[4], index) ||\r\n        this._find(this.root.args[5], index) ||\r\n        this._find(this.root.args[6], index) ||\r\n        this._find(this.root.args[7], index) ||\r\n        this._find(this.root.args[8], index) ||\r\n        this._find(this.root.args[9], index)\r\n      );\r\n    else return null;\r\n  }\r\n\r\n  _find(node: TreeNode | null, index: number): any {\r\n    if (node) {\r\n      if (node.index === index) return node;\r\n      else if (node.node_type === \"OPERAND\" || node.node_type === \"OPERATOR\")\r\n        return this._find(node.left, index) || this._find(node.right, index);\r\n      else if (node.node_type === \"FUNCTION\" || node.node_type === \"ARGS\")\r\n        return (\r\n          this._find(node.args[0], index) ||\r\n          this._find(node.args[1], index) ||\r\n          this._find(node.args[2], index) ||\r\n          this._find(node.args[3], index) ||\r\n          this._find(node.args[4], index) ||\r\n          this._find(node.args[5], index) ||\r\n          this._find(node.args[6], index) ||\r\n          this._find(node.args[7], index) ||\r\n          this._find(node.args[8], index) ||\r\n          this._find(node.args[9], index)\r\n        );\r\n      else return null;\r\n    }\r\n  }\r\n\r\n  delete(index: number) {\r\n    if (this.root.index === index) this.root = new TreeNode();\r\n    else if (this.root.left && this.root.left.index === index)\r\n      this.root.left = new TreeNode(this.root.left.index);\r\n    else if (this.root.right && this.root.right.index === index)\r\n      this.root.right = new TreeNode(this.root.right.index);\r\n    else if (this.root.node_type === \"FUNCTION\") {\r\n      for (let i = 0; i < this.root.args.length; i++) {\r\n        if (this.root.args[i].index === index)\r\n          this.root.args[i] = new TreeNode(this.root.args[i].index);\r\n      }\r\n      return (\r\n        this._delete(this.root.args[0], index) ||\r\n        this._delete(this.root.args[1], index) ||\r\n        this._delete(this.root.args[2], index) ||\r\n        this._delete(this.root.args[3], index) ||\r\n        this._delete(this.root.args[4], index) ||\r\n        this._delete(this.root.args[5], index) ||\r\n        this._delete(this.root.args[6], index) ||\r\n        this._delete(this.root.args[7], index) ||\r\n        this._delete(this.root.args[8], index) ||\r\n        this._delete(this.root.args[9], index)\r\n      );\r\n    } else\r\n      return (\r\n        this._delete(this.root.left, index) ||\r\n        this._delete(this.root.right, index)\r\n      );\r\n  }\r\n\r\n  _delete(node: TreeNode | null, index: number): any {\r\n    if (node) {\r\n      if (node.index === index) node = new TreeNode(node.index);\r\n      else if (node.left && node.left.index === index)\r\n        node.left = new TreeNode(node.left.index);\r\n      else if (node.right && node.right.index === index)\r\n        node.right = new TreeNode(node.right.index);\r\n      else if (node.node_type === \"FUNCTION\" || node.node_type === \"ARGS\") {\r\n        for (let i = 0; i < node.args.length; i++) {\r\n          if (node.args[i].index === index)\r\n            node.args[i] = new TreeNode(node.args[i].index);\r\n        }\r\n        return (\r\n          this._delete(node.args[0], index) ||\r\n          this._delete(node.args[1], index) ||\r\n          this._delete(node.args[2], index) ||\r\n          this._delete(node.args[3], index) ||\r\n          this._delete(node.args[4], index) ||\r\n          this._delete(node.args[5], index) ||\r\n          this._delete(node.args[6], index) ||\r\n          this._delete(node.args[7], index) ||\r\n          this._delete(node.args[8], index) ||\r\n          this._delete(node.args[9], index)\r\n        );\r\n      } else\r\n        return (\r\n          this._delete(node.left, index) || this._delete(node.right, index)\r\n        );\r\n    }\r\n  }\r\n\r\n  swap_with_left(index: number) {\r\n    const node = this.find(index);\r\n    const child = node.left;\r\n    if (node) {\r\n      if (\r\n        node.node_type !== \"OPERATOR\" ||\r\n        child.node_type !== \"OPERATOR\" ||\r\n        child.value === \"in\"\r\n      )\r\n        return false;\r\n      else {\r\n        [node.value, child.value] = [child.value, node.value];\r\n        [node.type, child.type] = [child.type, node.type];\r\n        [node.expected_type, child.expected_type] = [\r\n          child.expected_type,\r\n          node.expected_type,\r\n        ];\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  swap_with_right(index: number) {\r\n    const node = this.find(index);\r\n    const child = node.right;\r\n    if (node) {\r\n      if (\r\n        node.node_type !== \"OPERATOR\" ||\r\n        child.node_type !== \"OPERATOR\" ||\r\n        child.value === \"in\"\r\n      )\r\n        return false;\r\n      else {\r\n        [node.value, child.value] = [child.value, node.value];\r\n        [node.type, child.type] = [child.type, node.type];\r\n        [node.expected_type, child.expected_type] = [\r\n          child.expected_type,\r\n          node.expected_type,\r\n        ];\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default new Tree();\r\n","import { TextField, Button, Box } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { updateTree, getCurrentIndex, setCode } from \"../../store/codeSlice\";\r\nimport Tree from \"../../Tree\";\r\n\r\ntype Props = {\r\n  setNode: any;\r\n};\r\n\r\nexport const UserInput: React.FC<Props> = ({ setNode }) => {\r\n  const dispatch = useAppDispatch();\r\n  const index = useAppSelector(getCurrentIndex);\r\n  const node = Tree.find(index);\r\n  const [value, setValue] = React.useState(node.user_input ? node.value : \"\");\r\n\r\n  const handleClick = () => {\r\n    dispatch(setCode(value));\r\n    node.node_type = \"OPERAND\";\r\n    node.left = null;\r\n    node.right = null;\r\n    node.user_input = true;\r\n    node.value = value;\r\n    dispatch(updateTree());\r\n    node.type = isNaN(parseInt(value)) ? \"string\" : \"number\";\r\n    setNode(node);\r\n  };\r\n\r\n  const handleChange = (e: any) => {\r\n    node.type = isNaN(parseInt(e.target.value)) ? \"string\" : \"number\";\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Box display=\"flex\" padding={1} maxWidth={\"300px\"}>\r\n      <TextField\r\n        autoFocus\r\n        style={{ alignSelf: \"center\", flexGrow: 1 }}\r\n        placeholder=\"Пользовательский ввод\"\r\n        value={value}\r\n        onChange={handleChange}\r\n      />\r\n      <Button onClick={handleClick}>Ok</Button>\r\n    </Box>\r\n  );\r\n};\r\n","import { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n  })\r\n);\r\n","import React from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport InboxIcon from \"@material-ui/icons/Inbox\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { setCode, getCurrentIndex, updateTree } from \"../../store/codeSlice\";\r\nimport Tree from \"../../Tree\";\r\nimport { useStyles } from \"./styles\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nconst mapping_ = {\r\n  n: \"num\",\r\n  s: \"str\",\r\n  b: \"bool\",\r\n  d: \"date\",\r\n};\r\n\r\ntype Item = {\r\n  name: string;\r\n  type?: string;\r\n  arbitrary_args?: boolean;\r\n  is_operator?: boolean;\r\n  arguments_types?: string[];\r\n  return_type?: string;\r\n};\r\n\r\ntype Props = {\r\n  type: string;\r\n  items: Item[];\r\n};\r\n\r\nexport const CustomList: React.FC<Props> = ({ items, type }) => {\r\n  const dispatch = useAppDispatch();\r\n  const index_in_tree = useAppSelector(getCurrentIndex);\r\n  const classes = useStyles();\r\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n  const handleListItemClick = (\r\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n    index: number,\r\n    value: string\r\n  ) => {\r\n    setSelectedIndex(index);\r\n    dispatch(setCode(value));\r\n    const node = Tree.find(index_in_tree);\r\n\r\n    if (node) {\r\n      node.value = value;\r\n      node.node_type = items[index].is_operator\r\n        ? \"OPERATOR\"\r\n        : type === \"functions\"\r\n        ? \"FUNCTION\"\r\n        : \"OPERAND\";\r\n      node.left = null;\r\n      node.right = null;\r\n      node.user_input = false;\r\n\r\n      if (type === \"functions\") {\r\n        if (items[index].is_operator) {\r\n          node.setLeft(items[index].arguments_types![0]);\r\n          node.setArgs(\r\n            items[index].arbitrary_args,\r\n            items[index].arguments_types\r\n          );\r\n        } else {\r\n          node.args = [];\r\n          node.addArguments(items[index].arguments_types);\r\n          node.arbitrary_args = items[index].arbitrary_args;\r\n        }\r\n        node.type = items[index].return_type;\r\n      } else {\r\n        node.type = items[index].type;\r\n      }\r\n\r\n      dispatch(updateTree());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <List component=\"nav\">\r\n        {items.map((item: Item, ind: number) => (\r\n          <ListItem\r\n            key={ind}\r\n            button\r\n            selected={selectedIndex === ind}\r\n            onClick={(event) => handleListItemClick(event, ind, item.name)}\r\n          >\r\n            <Typography\r\n              variant=\"subtitle2\"\r\n              style={{ fontStyle: \"italic\", paddingRight: 10 }}\r\n            >\r\n              {item.type\r\n                ? mapping_[item.type[0] as keyof typeof mapping_]\r\n                : mapping_[item.return_type![0] as keyof typeof mapping_]}\r\n            </Typography>\r\n            <ListItemText primary={item.name} />\r\n            {item.arguments_types\r\n              ? \"(\" + item.arguments_types.join(\",\") + \")\"\r\n              : \"\"}\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n","export const mapping_list_types = new Map();\r\nmapping_list_types.set(\"functions\", \"Функции\");\r\nmapping_list_types.set(\"variables\", \"Переменные\");\r\nmapping_list_types.set(\"facts\", \"Факты\");\r\nmapping_list_types.set(\"measures\", \"Меры\");\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles(() => ({\r\n  text: {\r\n    width: \"90%\",\r\n    margin: 10,\r\n    marginTop: 0,\r\n  },\r\n  wrapper: {\r\n    width: \"100%\",\r\n    overflow: \"hidden\",\r\n    flexGrow: 1,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  box: {\r\n    flexGrow: 1,\r\n    overflow: \"auto\",\r\n    width: \"100%\",\r\n    maxHeight: 300,\r\n  },\r\n}));\r\n","import TextField from \"@material-ui/core/TextField\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { CustomList } from \"../List\";\r\nimport { mapping_list_types } from \"./mapping\";\r\nimport { useStyles } from \"./styles\";\r\nimport { getData } from \"../../store/codeSlice\";\r\nimport { useAppSelector } from \"../../hooks\";\r\n\r\ntype Item = {\r\n  name: string;\r\n  arbitrary_args?: boolean;\r\n  type?: string;\r\n  arguments_types?: string[];\r\n};\r\n\r\nexport const Wrapper: React.FC<{ type: string }> = ({ type }) => {\r\n  const data = useAppSelector(getData);\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n  const [filtered, setFiltered] = useState<Item[]>(\r\n    data[type.toUpperCase() as keyof typeof data]\r\n  );\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    setFiltered(() =>\r\n      data[type.toUpperCase() as keyof typeof data].filter((item) =>\r\n        item.name.includes(search)\r\n      )\r\n    );\r\n  }, [search]);\r\n\r\n  return (\r\n    <Box className={classes.wrapper}>\r\n      <TextField\r\n        label={mapping_list_types.get(type)}\r\n        className={classes.text}\r\n        value={search}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n      />\r\n      <Box className={classes.box}>\r\n        <CustomList items={filtered} type={type} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles(() => {\r\n  return {\r\n    list: {\r\n      width: 250,\r\n    },\r\n    fullList: {\r\n      width: \"auto\",\r\n    },\r\n    btn: {\r\n      margin: 5,\r\n    },\r\n  };\r\n});\r\n","import { makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles<Theme, { text: boolean }>((theme) => ({\r\n  mathIcon: {\r\n    \"&:before\": {\r\n      fontFamily: \"MathIcon\",\r\n      fontSize: ({ text }) => (text ? 10 : \"0.875rem\"),\r\n    },\r\n  },\r\n  eq: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f122\"',\r\n    },\r\n  },\r\n  ne: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f140\"',\r\n    },\r\n  },\r\n  gt: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f138\"',\r\n    },\r\n  },\r\n  gte: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f137\"',\r\n    },\r\n  },\r\n  lt: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f13a\"',\r\n    },\r\n  },\r\n  lte: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f13b\"',\r\n    },\r\n  },\r\n  plus: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f165\"',\r\n    },\r\n  },\r\n  mult: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f150\"',\r\n    },\r\n  },\r\n  or: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f142\"',\r\n    },\r\n  },\r\n  minus: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f14f\"',\r\n    },\r\n  },\r\n  in: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f134\"',\r\n    },\r\n  },\r\n  braces: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f15e\"',\r\n    },\r\n  },\r\n  union: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f17e\"',\r\n    },\r\n  },\r\n  divide: {\r\n    \"&:before\": {\r\n      content: '\"\\\\f169\"',\r\n    },\r\n  },\r\n}));\r\n","import useStyles from \"./styles\";\r\nimport cn from \"classnames\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { getText } from \"../../store/codeSlice\";\r\nimport { useAppSelector } from \"../../hooks\";\r\n\r\ntype Props = {\r\n  value: string;\r\n};\r\n\r\nexport const CustomIcon: React.FC<Props> = ({ value }) => {\r\n  const text = useAppSelector(getText);\r\n  const classes = useStyles({ text });\r\n  const getIcon = (value: string) => {\r\n    switch (value) {\r\n      case \"+\":\r\n        return <Box className={cn(classes.mathIcon, classes.plus)}></Box>;\r\n      case \"-\":\r\n        return <Box className={cn(classes.mathIcon, classes.minus)}></Box>;\r\n      case \"<\":\r\n        return <Box className={cn(classes.mathIcon, classes.lt)}></Box>;\r\n      case \"<=\":\r\n        return <Box className={cn(classes.mathIcon, classes.lte)}></Box>;\r\n      case \">\":\r\n        return <Box className={cn(classes.mathIcon, classes.gt)}></Box>;\r\n      case \">=\":\r\n        return <Box className={cn(classes.mathIcon, classes.gte)}></Box>;\r\n      case \"!=\":\r\n        return <Box className={cn(classes.mathIcon, classes.ne)}></Box>;\r\n      case \"==\":\r\n        return <Box className={cn(classes.mathIcon, classes.eq)}></Box>;\r\n      case \"*\":\r\n        return <Box className={cn(classes.mathIcon, classes.mult)}></Box>;\r\n      case \"/\":\r\n        return <Box className={cn(classes.mathIcon, classes.divide)}></Box>;\r\n      default:\r\n        return value;\r\n    }\r\n  };\r\n\r\n  return <>{getIcon(value)}</>;\r\n};\r\n","import Box from \"@material-ui/core/Box\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useStyles } from \"./styles\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { setCode, updateTree, getData } from \"../../store/codeSlice\";\r\nimport { CustomIcon } from \"../CustomIcon\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n};\r\n\r\nexport const CustomButtons: React.FC<Props> = ({ node }) => {\r\n  const classes = useStyles();\r\n  const dispatch = useAppDispatch();\r\n  const data = useAppSelector(getData);\r\n  const operators = data[\"OPERATORS\"];\r\n\r\n  return (\r\n    <Box display=\"flex\" justifyContent=\"flex-start\" flexWrap=\"wrap\">\r\n      {operators.map((operator) => (\r\n        <Button\r\n          className={classes.btn}\r\n          onClick={() => {\r\n            dispatch(setCode(operator.name));\r\n            if (node) {\r\n              node.value = operator.name;\r\n              node.node_type = \"OPERATOR\";\r\n              if (node.right && node.right.node_type === \"ARGS\")\r\n                node.right = new TreeNode(node.right.index);\r\n              node.user_input = false;\r\n              node.type = operator.return_type!;\r\n              node.setLeft(operator.arguments_types![0]);\r\n              node.setRight(operator.arguments_types![1]);\r\n            }\r\n            dispatch(updateTree());\r\n          }}\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n        >\r\n          <CustomIcon value={operator.name} />\r\n        </Button>\r\n      ))}\r\n    </Box>\r\n  );\r\n};\r\n","import Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport SyncAltIcon from \"@material-ui/icons/SyncAlt\";\r\nimport Tree, { TreeNode } from \"../../Tree\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { updateTree } from \"../../store/codeSlice\";\r\nimport { useState } from \"react\";\r\nimport { CustomIcon } from \"../CustomIcon\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\ntype Props = {\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n  node: TreeNode;\r\n};\r\n\r\nexport const Trigger: React.FC<Props> = ({ onClick, node }) => {\r\n  const dispatch = useAppDispatch();\r\n  const [show_delete, setShowDelete] = useState(false);\r\n\r\n  const handleDelete = (e: any) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    Tree.delete(node.index);\r\n    node.user_input = false;\r\n    dispatch(updateTree());\r\n  };\r\n\r\n  const handleSwapLeft = (e: any) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    Tree.swap_with_left(node.index);\r\n    dispatch(updateTree());\r\n  };\r\n\r\n  const handleSwapRight = (e: any) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    Tree.swap_with_right(node.index);\r\n    dispatch(updateTree());\r\n  };\r\n\r\n  return node.value ? (\r\n    <Button\r\n      onClick={onClick}\r\n      disableRipple={true}\r\n      style={{ position: \"relative\" }}\r\n      onMouseEnter={() => setShowDelete(true)}\r\n      onMouseLeave={() => setShowDelete(false)}\r\n    >\r\n      <Box display=\"flex\" flexDirection=\"column\">\r\n        {node.expected_type !== \"any\" && node.expected_type !== node.type && (\r\n          <Typography variant=\"caption\" style={{ color: \"red\", fontSize: 10 }}>\r\n            expected: {node.expected_type}\r\n          </Typography>\r\n        )}\r\n        <Box\r\n          color={\r\n            node.expected_type !== \"any\" && node.expected_type !== node.type\r\n              ? \"red\"\r\n              : \"unset\"\r\n          }\r\n        >\r\n          {node.user_input && isNaN(parseInt(node.value)) ? (\r\n            <Box color=\"brown\">\"{node.value}\"</Box>\r\n          ) : (\r\n            <CustomIcon value={node.value} />\r\n          )}\r\n        </Box>\r\n\r\n        {/* <Typography variant=\"caption\">{node.type}</Typography> */}\r\n      </Box>\r\n      {show_delete && (\r\n        <IconButton\r\n          size=\"small\"\r\n          onClick={handleDelete}\r\n          style={{ position: \"absolute\", top: -5, right: -5 }}\r\n        >\r\n          <ClearIcon style={{ fontSize: 15 }} />\r\n        </IconButton>\r\n      )}\r\n      {show_delete && node.left && node.left.node_type === \"OPERATOR\" && (\r\n        <IconButton\r\n          size=\"small\"\r\n          onClick={handleSwapLeft}\r\n          style={{ position: \"absolute\", top: 7, left: -5 }}\r\n        >\r\n          <SyncAltIcon style={{ fontSize: 15 }} />\r\n        </IconButton>\r\n      )}\r\n      {show_delete && node.right && node.right.node_type === \"OPERATOR\" && (\r\n        <IconButton\r\n          size=\"small\"\r\n          onClick={handleSwapRight}\r\n          style={{ position: \"absolute\", top: 7, right: -5 }}\r\n        >\r\n          <SyncAltIcon style={{ fontSize: 15 }} />\r\n        </IconButton>\r\n      )}\r\n    </Button>\r\n  ) : (\r\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n      <Box position=\"relative\" width=\"100%\">\r\n        <Typography style={{ position: \"absolute\" }} variant=\"caption\">\r\n          {node.expected_type}\r\n        </Typography>\r\n      </Box>\r\n      <IconButton onClick={onClick}>\r\n        <AddIcon />\r\n      </IconButton>\r\n    </Box>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { UserInput } from \"../UserInput\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport { Wrapper } from \"../Wrapper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport { CustomButtons } from \"../CustomButtons\";\r\nimport Tree, { TreeNode } from \"../../Tree\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { setCurrentIndex, getCode } from \"../../store/codeSlice\";\r\nimport { Trigger } from \"../Trigger\";\r\n\r\nexport const CustomPopover: React.FC<{ index: number }> = ({ index }) => {\r\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(\r\n    null\r\n  );\r\n\r\n  const dispatch = useAppDispatch();\r\n  const [node, setNode] = React.useState<TreeNode>(Tree.find(index));\r\n  const [show, setShow] = React.useState<boolean>(false);\r\n  const [type, setType] = React.useState<string | null>(null);\r\n  const [open, setOpen] = React.useState(false);\r\n  const code = useAppSelector(getCode);\r\n\r\n  useEffect(() => {\r\n    setNode(Tree.find(index));\r\n  }, [index]);\r\n\r\n  useEffect(() => {\r\n    setAnchorEl(null);\r\n    setOpen(false);\r\n  }, [code]);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n    setOpen(true);\r\n    dispatch(setCurrentIndex(index));\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleListItemClick = (_type: string) => {\r\n    setShow(true);\r\n    setType(_type);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setShow(false);\r\n    setType(null);\r\n  };\r\n\r\n  const getComponent = () => {\r\n    switch (type) {\r\n      case \"functions\":\r\n        return <Wrapper type=\"functions\" />;\r\n      case \"variables\":\r\n        return <Wrapper type=\"variables\" />;\r\n    }\r\n  };\r\n\r\n  const id = open ? \"simple-popover\" : undefined;\r\n\r\n  return (\r\n    <div>\r\n      <Trigger node={node} onClick={handleClick} />\r\n      {open && (\r\n        <Popover\r\n          id={id}\r\n          open={open}\r\n          anchorEl={anchorEl}\r\n          onClose={handleClose}\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"center\",\r\n          }}\r\n          transformOrigin={{\r\n            vertical: \"top\",\r\n            horizontal: \"center\",\r\n          }}\r\n        >\r\n          <Box position=\"relative\" maxWidth=\"300px\">\r\n            <UserInput setNode={setNode} />\r\n            <CustomButtons node={node} />\r\n            <List component=\"nav\">\r\n              <ListItem\r\n                key={0}\r\n                button\r\n                onClick={() => handleListItemClick(\"variables\")}\r\n              >\r\n                <ListItemText primary={\"Переменные\"} />\r\n                <ListItemIcon style={{ minWidth: 0 }}>\r\n                  <ArrowForwardIosIcon />\r\n                </ListItemIcon>\r\n              </ListItem>\r\n\r\n              <ListItem\r\n                key={3}\r\n                button\r\n                onClick={() => handleListItemClick(\"functions\")}\r\n              >\r\n                <ListItemText primary={\"Функции\"} />\r\n                <ListItemIcon style={{ minWidth: 0 }}>\r\n                  <ArrowForwardIosIcon />\r\n                </ListItemIcon>\r\n              </ListItem>\r\n            </List>\r\n            {show && (\r\n              <Box\r\n                position=\"absolute\"\r\n                left=\"0px\"\r\n                top=\"0px\"\r\n                width=\"100%\"\r\n                overflow=\"hidden\"\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                height=\"100%\"\r\n                bgcolor=\"white\"\r\n              >\r\n                <IconButton\r\n                  onClick={handleCancel}\r\n                  style={{\r\n                    marginTop: 10,\r\n                    marginLeft: 10,\r\n                    alignSelf: \"flex-start\",\r\n                  }}\r\n                >\r\n                  <ArrowBackIosIcon />\r\n                </IconButton>\r\n                {getComponent()}\r\n              </Box>\r\n            )}\r\n          </Box>\r\n        </Popover>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { Wrapper } from \"../Wrapper\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { setCurrentIndex, getCode } from \"../../store/codeSlice\";\r\nimport Tree from \"../../Tree\";\r\nimport { CustomButtons } from \"../CustomButtons\";\r\nimport { useAppSelector } from \"../../hooks\";\r\nimport { UserInput } from \"../UserInput\";\r\nimport { Trigger } from \"../Trigger\";\r\n\r\nexport const CustomDrawer: React.FC<{\r\n  index: number;\r\n}> = ({ index }) => {\r\n  const dispatch = useAppDispatch();\r\n  const [state, setState] = React.useState(false);\r\n  const [node, setNode] = React.useState(Tree.find(index));\r\n  const code = useAppSelector(getCode);\r\n\r\n  useEffect(() => {\r\n    setState(false);\r\n  }, [code]);\r\n\r\n  const toggleDrawer =\r\n    (open: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\r\n      if (\r\n        event.type === \"keydown\" &&\r\n        ((event as React.KeyboardEvent).key === \"Tab\" ||\r\n          (event as React.KeyboardEvent).key === \"Shift\")\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      if (open) dispatch(setCurrentIndex(index));\r\n      setState(open);\r\n    };\r\n\r\n  const list = () => (\r\n    <Box display=\"flex\">\r\n      <Wrapper type=\"functions\" />\r\n      <Wrapper type=\"variables\" />\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Trigger node={node} onClick={toggleDrawer(true)} />\r\n      <Drawer anchor={\"bottom\"} open={state} onClose={toggleDrawer(false)}>\r\n        <UserInput setNode={setNode} />\r\n        <CustomButtons node={node} />\r\n        {list()}\r\n      </Drawer>\r\n    </div>\r\n  );\r\n};\r\n","import { CustomPopover } from \"../CustomPopover\";\r\nimport { CustomDrawer } from \"../Drawer\";\r\nimport { useAppSelector } from \"../../hooks\";\r\nimport { getDrawer } from \"../../store/codeSlice\";\r\n\r\nexport const Leaf: React.FC<{ index: number }> = ({ index }) => {\r\n  const drawer = useAppSelector(getDrawer);\r\n\r\n  return drawer ? (\r\n    <CustomDrawer index={index} />\r\n  ) : (\r\n    <CustomPopover index={index} />\r\n  );\r\n};\r\n","import { makeStyles, Theme } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles<Theme, { state: boolean }>({\r\n  box: {\r\n    cursor: \"pointer\",\r\n    margin: 5,\r\n    padding: 5,\r\n    borderLeft: ({ state }) => (state ? \"2px solid black\" : \"none\"),\r\n    borderRight: ({ state }) => (state ? \"2px solid black\" : \"none\"),\r\n    flexDirection: ({ state }) => (state ? \"column\" : \"row\"),\r\n    alignItems: \"center\",\r\n    display: \"flex\",\r\n    borderRadius: 10,\r\n  },\r\n  typography: {\r\n    margin: 5,\r\n    fontSize: 25,\r\n  },\r\n  mid: {\r\n    padding: 15,\r\n    fontSize: 25,\r\n  },\r\n});\r\n","import { Func } from \"./\";\r\nimport { Node } from \"../Node\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport { Leaf } from \"../Leaf\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n};\r\n\r\nexport const ComponentSelector: React.FC<Props> = ({ node }) => {\r\n  switch (node.node_type) {\r\n    case \"FUNCTION\":\r\n      return <Func node={node} />;\r\n    case \"OPERATOR\":\r\n      return <Node node={node} />;\r\n    default:\r\n      return <Leaf index={node.index} />;\r\n  }\r\n};\r\n","import { Box } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport { useState } from \"react\";\r\nimport { useStyles } from \"./styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { updateTree } from \"../../store/codeSlice\";\r\nimport { Leaf } from \"../Leaf\";\r\nimport { ComponentSelector } from \"./ComponentSelector\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n};\r\n\r\nexport const Func: React.FC<Props> = ({ node }) => {\r\n  const dispatch = useAppDispatch();\r\n  const [state, setState] = useState<boolean>(false);\r\n  const [show, setShow] = useState(false);\r\n  const classes = useStyles({ state });\r\n  const handleClick = () => setState(!state);\r\n\r\n  const handleAddClick = () => {\r\n    node.addArguments([\"string\"]);\r\n    dispatch(updateTree());\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      alignItems=\"center\"\r\n      color={\r\n        node.expected_type !== \"any\" && node.expected_type !== node.type\r\n          ? \"red\"\r\n          : \"unset\"\r\n      }\r\n      onMouseEnter={() => setShow(true)}\r\n      onMouseLeave={() => setShow(false)}\r\n    >\r\n      <Leaf index={node.index} />\r\n      {!state && <Typography className={classes.typography}>(</Typography>}\r\n      <Box className={classes.box}>\r\n        {node.args &&\r\n          node.args.map((arg: TreeNode, i: number) => {\r\n            return i === node.args.length - 1 ? (\r\n              <ComponentSelector node={arg} />\r\n            ) : (\r\n              <>\r\n                <ComponentSelector node={arg} />\r\n                <Typography className={classes.mid} onClick={handleClick}>\r\n                  ,\r\n                </Typography>\r\n              </>\r\n            );\r\n          })}\r\n        {node.arbitrary_args && show && node.args.length < 10 && (\r\n          <IconButton size=\"small\" onClick={handleAddClick}>\r\n            <AddIcon style={{ fontSize: 15 }} />\r\n          </IconButton>\r\n        )}\r\n      </Box>\r\n\r\n      {!state && <Typography className={classes.typography}>)</Typography>}\r\n    </Box>\r\n  );\r\n};\r\n","import { makeStyles, Theme } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles<Theme, { state: boolean }>({\r\n  box: {\r\n    cursor: \"pointer\",\r\n    margin: 5,\r\n    padding: 5,\r\n    borderLeft: ({ state }) => (state ? \"2px solid black\" : \"none\"),\r\n    borderRight: ({ state }) => (state ? \"2px solid black\" : \"none\"),\r\n    flexDirection: ({ state }) => (state ? \"column\" : \"row\"),\r\n    alignItems: \"center\",\r\n    display: \"flex\",\r\n    borderRadius: 10,\r\n  },\r\n  typography: {\r\n    margin: 5,\r\n    fontSize: 25,\r\n  },\r\n  mid: {\r\n    padding: 15,\r\n    fontSize: 25,\r\n  },\r\n});\r\n","import { Box } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Node } from \"../Node\";\r\nimport { Func } from \"../Func\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport { useState } from \"react\";\r\nimport { useStyles } from \"./styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { updateTree } from \"../../store/codeSlice\";\r\nimport { Leaf } from \"../Leaf\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n};\r\n\r\nexport const Args: React.FC<Props> = ({ node }) => {\r\n  const dispatch = useAppDispatch();\r\n  const [state, setState] = useState<boolean>(false);\r\n  const [show, setShow] = useState(false);\r\n  const classes = useStyles({ state });\r\n  const handleClick = () => setState(!state);\r\n\r\n  const getComponent = (node: TreeNode) => {\r\n    switch (node.node_type) {\r\n      case \"FUNCTION\":\r\n        return <Func node={node} />;\r\n\r\n      case \"OPERATOR\":\r\n        return <Node node={node} />;\r\n      default:\r\n        return <Leaf index={node.index} />;\r\n    }\r\n  };\r\n\r\n  const handleAddClick = () => {\r\n    node.addArguments([\"string\"]);\r\n    dispatch(updateTree());\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      alignItems=\"center\"\r\n      onMouseEnter={() => setShow(true)}\r\n      onMouseLeave={() => setShow(false)}\r\n    >\r\n      {!state && <Typography className={classes.typography}>(</Typography>}\r\n      <Box className={classes.box}>\r\n        {node.args &&\r\n          node.args.map((arg: TreeNode, i: number) => {\r\n            return i === node.args.length - 1 ? (\r\n              getComponent(arg)\r\n            ) : (\r\n              <>\r\n                {getComponent(arg)}\r\n                <Typography className={classes.mid} onClick={handleClick}>\r\n                  ,\r\n                </Typography>\r\n              </>\r\n            );\r\n          })}\r\n        {node.arbitrary_args && show && node.args.length < 10 && (\r\n          <IconButton size=\"small\" onClick={handleAddClick}>\r\n            <AddIcon style={{ fontSize: 15 }} />\r\n          </IconButton>\r\n        )}\r\n      </Box>\r\n\r\n      {!state && <Typography className={classes.typography}>)</Typography>}\r\n    </Box>\r\n  );\r\n};\r\n","import { Func } from \"../Func\";\r\nimport { Node } from \"./\";\r\nimport { Args } from \"../Args\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport { Leaf } from \"../Leaf\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n};\r\n\r\nexport const ComponentSelector: React.FC<Props> = ({ node }) => {\r\n  switch (node.node_type) {\r\n    case \"FUNCTION\":\r\n      return <Func node={node} />;\r\n    case \"OPERATOR\":\r\n      return <Node node={node} />;\r\n    case \"ARGS\":\r\n      return <Args node={node} />;\r\n    default:\r\n      return <Leaf index={node.index} />;\r\n  }\r\n};\r\n","import { Box } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { TreeNode } from \"../../Tree\";\r\nimport { useAppSelector } from \"../../hooks\";\r\nimport { getBrace } from \"../../store/codeSlice\";\r\nimport { useStyles } from \"./styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AutorenewIcon from \"@material-ui/icons/Autorenew\";\r\nimport { Leaf } from \"../Leaf\";\r\nimport { ComponentSelector } from \"./ComponentSelector\";\r\n\r\ntype Props = {\r\n  node: TreeNode;\r\n};\r\n\r\nexport const Node: React.FC<Props> = ({ node }) => {\r\n  const brace = useAppSelector(getBrace);\r\n  const [state, setState] = useState(false);\r\n  const [visible, setVisible] = useState(false);\r\n  const classes = useStyles({ state, brace });\r\n\r\n  const handleClick = () => setState(!state);\r\n\r\n  return (\r\n    <Box\r\n      color={\r\n        node.expected_type !== \"any\" && node.expected_type !== node.type\r\n          ? \"red\"\r\n          : \"unset\"\r\n      }\r\n      className={classes.box}\r\n      onMouseEnter={() => setVisible(true)}\r\n      onMouseLeave={() => setVisible(false)}\r\n    >\r\n      {visible && (\r\n        <IconButton\r\n          onClick={handleClick}\r\n          className={classes.btn}\r\n          size={\"small\"}\r\n        >\r\n          <AutorenewIcon className={classes.icon} />\r\n        </IconButton>\r\n      )}\r\n      {node.left && <ComponentSelector node={node.left} />}\r\n      <Leaf index={node.index} />\r\n      {node.right && <ComponentSelector node={node.right} />}\r\n    </Box>\r\n  );\r\n};\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles(() => ({\r\n  box: {\r\n    width: 1000,\r\n    height: 700,\r\n    border: \"1px solid black\",\r\n    margin: \"auto\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    position: \"relative\",\r\n  },\r\n}));\r\n","import Box from \"@material-ui/core/Box\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport {\r\n  toggleDrawer,\r\n  toggleBrace,\r\n  toggleText,\r\n  updateTree,\r\n} from \"../../store/codeSlice\";\r\nimport SubjectIcon from \"@material-ui/icons/Subject\";\r\nimport Tree, { TreeNode } from \"../../Tree\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\n\r\nexport const Settings = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleDrawer = () => dispatch(toggleDrawer());\r\n\r\n  const handleBrace = () => dispatch(toggleBrace());\r\n\r\n  const handleText = () => dispatch(toggleText());\r\n\r\n  const handleReset = () => {\r\n    Tree.root = new TreeNode();\r\n    dispatch(updateTree());\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      position=\"absolute\"\r\n      right=\"-50px\"\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n    >\r\n      <IconButton onClick={handleDrawer}>\r\n        <SettingsIcon />\r\n      </IconButton>\r\n      <IconButton onClick={handleBrace}>()</IconButton>\r\n      <IconButton onClick={handleText}>\r\n        <SubjectIcon />\r\n      </IconButton>\r\n      <IconButton onClick={handleReset}>\r\n        <ClearIcon />\r\n      </IconButton>\r\n    </Box>\r\n  );\r\n};\r\n","import Box from \"@material-ui/core/Box\";\r\nimport { Node } from \"../Node\";\r\nimport { Func } from \"../Func\";\r\nimport Tree, { TreeNode } from \"../../Tree\";\r\nimport { useEffect } from \"react\";\r\nimport { useAppSelector } from \"../../hooks\";\r\nimport { getUpdateTree, getText } from \"../../store/codeSlice\";\r\nimport { useStyles } from \"./styles\";\r\nimport { Settings } from \"./Settings\";\r\nimport { Leaf } from \"../Leaf\";\r\n\r\nexport const VisualBuilder = () => {\r\n  const update_tree = useAppSelector(getUpdateTree);\r\n  const text = useAppSelector(getText);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    traversTree(Tree.root);\r\n  }, [update_tree]);\r\n\r\n  const traversTree = (node: TreeNode) => {\r\n    if (node.node_type === \"OPERAND\") return <Leaf index={node.index} />;\r\n    else if (node.node_type === \"FUNCTION\") return <Func node={node} />;\r\n    else return <Node node={node} />;\r\n  };\r\n\r\n  return (\r\n    <Box margin=\"auto\" position=\"relative\">\r\n      <Settings />\r\n      <Box className={classes.box}>\r\n        <Box\r\n          margin={text ? \"unset\" : \"auto\"}\r\n          width={text ? \"100%\" : \"unset\"}\r\n          display={text ? \"flex\" : \"unset\"}\r\n          flexWrap={text ? \"wrap\" : \"unset\"}\r\n          alignItems=\"flex-start\"\r\n        >\r\n          {traversTree(Tree.root)}\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","export const DATA = {\r\n  VARIABLES: [\r\n    { name: \"DISTANCE\", type: \"number\" },\r\n    { name: \"LENGHT\", type: \"number\" },\r\n    { name: \"HEIGHT\", type: \"number\" },\r\n    { name: \"WEIGHT\", type: \"number\" },\r\n    { name: \"LATITUDE\", type: \"number\" },\r\n    { name: \"REPLICAS\", type: \"number\" },\r\n    { name: \"CODE_GENDER\", type: \"string\" },\r\n    { name: \"AMT_ANNUITY\", type: \"number\" },\r\n    { name: \"CNT_FAM_MEMBERS\", type: \"string\" },\r\n  ],\r\n  OPERATORS: [\r\n    {\r\n      name: \"and\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"boolean\", \"boolean\"],\r\n    },\r\n    {\r\n      name: \"or\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"boolean\", \"boolean\"],\r\n    },\r\n    {\r\n      name: \"+\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\", \"number\"],\r\n    },\r\n    {\r\n      name: \"-\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\", \"number\"],\r\n    },\r\n    {\r\n      name: \"*\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\", \"number\"],\r\n    },\r\n    {\r\n      name: \"/\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\", \"number\"],\r\n    },\r\n    {\r\n      name: \"<\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"any\", \"any\"],\r\n    },\r\n    {\r\n      name: \"<=\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"any\", \"any\"],\r\n    },\r\n    {\r\n      name: \"==\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"any\", \"any\"],\r\n    },\r\n    {\r\n      name: \"!=\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"any\", \"any\"],\r\n    },\r\n    {\r\n      name: \">\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"any\", \"any\"],\r\n    },\r\n    {\r\n      name: \">=\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"any\", \"any\"],\r\n    },\r\n    {\r\n      name: \"like\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"string\", \"string\"],\r\n    },\r\n    {\r\n      name: \"ilike\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"string\", \"string\"],\r\n    },\r\n    {\r\n      name: \"contains\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"string\", \"string\"],\r\n    },\r\n  ],\r\n  FUNCTIONS: [\r\n    { name: \"curent_date\", return_type: \"datetime\", arguments_types: [] },\r\n    { name: \"current_time\", return_type: \"datetime\", arguments_types: [] },\r\n    { name: \"current_timestamp\", return_type: \"number\", arguments_types: [] },\r\n    { name: \"now\", return_type: \"datetime\", arguments_types: [] },\r\n    {\r\n      name: \"concat\",\r\n      arbitrary_args: true,\r\n      return_type: \"string\",\r\n      arguments_types: [\"string\"],\r\n    },\r\n    {\r\n      name: \"cahr_length\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"string\"],\r\n    },\r\n    { name: \"random\", return_type: \"number\", arguments_types: [] },\r\n    {\r\n      name: \"coalesce\",\r\n      arbitrary_args: true,\r\n      return_type: \"any\",\r\n      arguments_types: [\"any\"],\r\n    },\r\n    {\r\n      name: \"in\",\r\n      is_operator: true,\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"any\"],\r\n      arbitrary_args: true,\r\n    },\r\n    {\r\n      name: \"between\",\r\n      is_operator: true,\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"number\", \"number\"],\r\n      arbitrary_args: false,\r\n    },\r\n    {\r\n      name: \"not_in\",\r\n      is_operator: true,\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"any\"],\r\n      arbitrary_args: true,\r\n    },\r\n    {\r\n      name: \"startwith\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"string\"],\r\n    },\r\n    {\r\n      name: \"endwith\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"string\"],\r\n    },\r\n    {\r\n      name: \"not\",\r\n      return_type: \"boolean\",\r\n      arguments_types: [\"boolean\"],\r\n    },\r\n    {\r\n      name: \"power\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\", \"number\"],\r\n    },\r\n    {\r\n      name: \"ln\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\"],\r\n    },\r\n    {\r\n      name: \"exp\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\"],\r\n    },\r\n    {\r\n      name: \"sqrt\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\"],\r\n    },\r\n    {\r\n      name: \"abs\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\"],\r\n    },\r\n    {\r\n      name: \"ceil\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\"],\r\n    },\r\n    {\r\n      name: \"floor\",\r\n      return_type: \"number\",\r\n      arguments_types: [\"number\"],\r\n    },\r\n  ],\r\n};\r\n","import { VisualBuilder } from \"../VisualBuilder\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { useEffect } from \"react\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { setData } from \"../../store/codeSlice\";\r\nimport { DATA } from \"../../data\";\r\n\r\nexport const App = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(setData(DATA));\r\n  }, []);\r\n\r\n  return (\r\n    <Box display=\"flex\" height=\"100vh\" width=\"100%\">\r\n      <VisualBuilder />\r\n    </Box>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport codeReducer from \"./codeSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    code: codeReducer,\r\n  },\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./components/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}